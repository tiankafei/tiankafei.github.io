(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{528:function(e,a,t){"use strict";t.r(a);var s=t(65),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"elasticsearch学习笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch学习笔记"}},[e._v("#")]),e._v(" Elasticsearch学习笔记")]),e._v(" "),t("h2",{attrs:{id:"帮助文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#帮助文档"}},[e._v("#")]),e._v(" 帮助文档")]),e._v(" "),t("h3",{attrs:{id:"中文官方文档-较老"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中文官方文档-较老"}},[e._v("#")]),e._v(" 中文官方文档（较老）")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("https")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//www.elastic.co/guide/cn/elasticsearch/guide/current/getting-started.html#getting-started")])]),e._v("\n")])])]),t("h3",{attrs:{id:"英文最新文档-较新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#英文最新文档-较新"}},[e._v("#")]),e._v(" 英文最新文档（较新）")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("https")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//www.elastic.co/guide/en/elasticsearch/reference/7.10/getting-started.html")])]),e._v("\n")])])]),t("h2",{attrs:{id:"es核心概念和原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es核心概念和原理"}},[e._v("#")]),e._v(" ES核心概念和原理")]),e._v(" "),t("h3",{attrs:{id:"什么是搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是搜索"}},[e._v("#")]),e._v(" 什么是搜索")]),e._v(" "),t("p",[e._v("百度、垂直搜索（站内搜索）。搜索：通过一个"),t("strong",[e._v("关键词")]),e._v("或一段描述，得到你想要（相关度高）的结果")]),e._v(" "),t("h3",{attrs:{id:"如何实现搜索功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现搜索功能"}},[e._v("#")]),e._v(" 如何实现搜索功能")]),e._v(" "),t("p",[e._v("关系型数据库：性能差、不可靠、结果不准确（相关度低）")]),e._v(" "),t("h3",{attrs:{id:"倒排索引、lucene和全文检索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引、lucene和全文检索"}},[e._v("#")]),e._v(" 倒排索引、"),t("code",[e._v("Lucene")]),e._v("和全文检索")]),e._v(" "),t("ol",[t("li",[e._v("倒排索引的数据结构（存储的数据）\n"),t("ol",[t("li",[e._v("包含这个关键词的"),t("code",[e._v("document list")])]),e._v(" "),t("li",[e._v("关键词在每个doc中出现的次数"),t("code",[e._v("TF term frequency")])]),e._v(" "),t("li",[e._v("关键词在整个索引中出现的次数"),t("code",[e._v("IDF inverse doc frequency")]),e._v("（值越大，代表相关度越低）")]),e._v(" "),t("li",[e._v("关键词在当前"),t("code",[e._v("doc")]),e._v("中出现的次数")]),e._v(" "),t("li",[e._v("每个"),t("code",[e._v("doc")]),e._v("的长度，越长相关度越低")]),e._v(" "),t("li",[e._v("包含这个关键词的所有"),t("code",[e._v("doc")]),e._v("的平均长度")])])]),e._v(" "),t("li",[t("code",[e._v("Lucene")]),e._v("："),t("code",[e._v("jar")]),e._v("包，帮我们创建倒排索引，提供了复杂的"),t("code",[e._v("API")])]),e._v(" "),t("li",[e._v("如果用"),t("code",[e._v("Luncene")]),e._v("做集群，会有哪些问题\n"),t("ul",[t("li",[e._v("节点一旦宕机，节点数据丢失，后果不堪设想，可用性差")]),e._v(" "),t("li",[e._v("自己维护，麻烦（自己创建管理索引），单台节点的承载请求的能里是有限的，需要人工做负载。")])])])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.png",alt:"倒排索引"}})]),e._v(" "),t("h3",{attrs:{id:"倒排索引的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#倒排索引的特点"}},[e._v("#")]),e._v(" 倒排索引的特点")]),e._v(" "),t("ol",[t("li",[e._v("倒排索引的数据量 > 原始数据量")]),e._v(" "),t("li",[e._v("倒排索引做的是完全匹配，不需要全表扫描")]),e._v(" "),t("li",[e._v("倒排索引记录着这个词出现在原始数据的那个主键，根据主键去原始数据中查询是很快的")])]),e._v(" "),t("h3",{attrs:{id:"elasticsearch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[e._v("#")]),e._v(" Elasticsearch")]),e._v(" "),t("ol",[t("li",[e._v("特点\n"),t("ul",[t("li",[e._v("分布式")]),e._v(" "),t("li",[e._v("高性能")]),e._v(" "),t("li",[e._v("高可用")]),e._v(" "),t("li",[e._v("可伸缩")]),e._v(" "),t("li",[e._v("易维护")])])]),e._v(" "),t("li",[e._v("优点\n"),t("ul",[t("li",[e._v("面向开发者友好，屏蔽了Lucene的复杂特性，集群自动发现（cluster discovery）")]),e._v(" "),t("li",[e._v("自动维护数据在多个节点上的建立")]),e._v(" "),t("li",[e._v("会帮我们做搜索请求的负载均衡")]),e._v(" "),t("li",[e._v("自动维护冗余副本，保证了部分节点宕机的情况下仍然不会有任何数据丢失")]),e._v(" "),t("li",[t("code",[e._v("ES")]),e._v("基于"),t("code",[e._v("Lucene")]),e._v("提供了很多高级功能：复合查询、聚合分析、基于地理位置等")]),e._v(" "),t("li",[e._v("对于大公司，可以构建几百台服务器的大型分布式集群，处理PB级别数据；对于小公司，开箱即用，门槛低上手简单")]),e._v(" "),t("li",[e._v("相比传统数据库，提供了全文检索，同义词处理（美丽的 cls > 漂亮的 cls），相关度排名。聚合分析以及海量数据的近实时（NTR）处理，这些传统数据库完全做不到")])])]),e._v(" "),t("li",[e._v("应用领域\n"),t("ul",[t("li",[e._v("百度（全文检索，高亮、搜索推荐）")]),e._v(" "),t("li",[e._v("各大网站的用户行为日志（用户点击、浏览、收藏、评论）")]),e._v(" "),t("li",[e._v("BI（business Intelligence商业智能），数据分析，数据挖掘统计")]),e._v(" "),t("li",[e._v("Github：代码托管平台，几千亿行代码")]),e._v(" "),t("li",[e._v("ELK：Elasticsearch（数据存储）、Logstash（日志采集）、Kibana（可视化）")])])])]),e._v(" "),t("h3",{attrs:{id:"es-核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-核心概念"}},[e._v("#")]),e._v(" ES 核心概念")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("cluster")]),e._v("（集群）：每个集群至少包含两个节点")]),e._v(" "),t("li",[t("code",[e._v("node")]),e._v("：集群中的每个节点，一个节点不代表一台服务器")]),e._v(" "),t("li",[t("code",[e._v("field")]),e._v("：一个数据字段，与"),t("code",[e._v("index")]),e._v("和"),t("code",[e._v("type")]),e._v("一起，可以定位一个"),t("code",[e._v("doc")])]),e._v(" "),t("li",[t("code",[e._v("document")]),e._v("："),t("code",[e._v("es")]),e._v("最小的数据单元，通常是以"),t("code",[e._v("json")]),e._v("的形式存储的")]),e._v(" "),t("li",[t("code",[e._v("type")]),e._v("：逻辑上的数据分类，"),t("code",[e._v("es7.x")]),e._v("中删除了"),t("code",[e._v("type")]),e._v("的概念")]),e._v(" "),t("li",[t("code",[e._v("index")]),e._v("：一类相同或者类似的"),t("code",[e._v("doc")]),e._v("，比如一个员工索引，商品索引")]),e._v(" "),t("li",[t("code",[e._v("shard")]),e._v("分片：P分片，R副本\n"),t("ul",[t("li",[e._v("一个"),t("code",[e._v("index")]),e._v("包含多个"),t("code",[e._v("shard")]),e._v("，默认5个分片，默认每个分片分配一个副本，分片的数量在创建索引的时候设置，如果想修改，需要重建索引")]),e._v(" "),t("li",[e._v("每个"),t("code",[e._v("shard")]),e._v("都是一个"),t("code",[e._v("lucene")]),e._v("实例，有完整的创建索引的处理请求能力")]),e._v(" "),t("li",[e._v("es会自动在"),t("code",[e._v("nodes")]),e._v("上为我们做"),t("code",[e._v("shard")]),e._v("均衡")]),e._v(" "),t("li",[e._v("一个"),t("code",[e._v("doc")]),e._v("是不可能同时存在与多个分片中的，但是可以存在于多个副本中")]),e._v(" "),t("li",[e._v("分片和对应的副本不能同时存在于同一个节点，所以最低的可用配置是两个节点，互为主备")])])])]),e._v(" "),t("h2",{attrs:{id:"环境安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境安装"}},[e._v("#")]),e._v(" 环境安装")]),e._v(" "),t("h3",{attrs:{id:"docker-安装配置-es"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装配置-es"}},[e._v("#")]),e._v(" docker 安装配置 es")]),e._v(" "),t("h4",{attrs:{id:"拉取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像"}},[e._v("#")]),e._v(" 拉取镜像")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull elasticsearch:7.6.2\n")])])]),t("h4",{attrs:{id:"启动es"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动es"}},[e._v("#")]),e._v(" 启动es")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("9200")]),e._v(":9200 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("9300")]),e._v(":9300 --restart"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("always -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"discovery.type=single-node"')]),e._v(" --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("elasticsearch elasticsearch:7.6.2\n")])])]),t("h4",{attrs:{id:"修改配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改配置"}},[e._v("#")]),e._v(" 修改配置")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("进入容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it elasticsearch "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("vi config/elasticsearch.yml")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("cluster.name: "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"my-application"')]),e._v("\nnode.name: "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node-1"')]),e._v("\nnetwork.host: "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.0")]),e._v(".0.0\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重启容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" restart elasticsearch\n")])])])])]),e._v(" "),t("h4",{attrs:{id:"访问地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问地址"}},[e._v("#")]),e._v(" 访问地址")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//<IP>:<PORT>")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//192.168.21.123:9200/")])]),e._v("\n")])])]),t("h3",{attrs:{id:"docker-安装配置-kibana"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装配置-kibana"}},[e._v("#")]),e._v(" docker 安装配置 kibana")]),e._v(" "),t("h4",{attrs:{id:"拉取镜像-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像-2"}},[e._v("#")]),e._v(" 拉取镜像")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull kibana:7.6.2\n")])])]),t("h4",{attrs:{id:"启动kibana"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动kibana"}},[e._v("#")]),e._v(" 启动kibana")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5601")]),e._v(":5601 --restart"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("always --name kibana kibana:7.6.2\n")])])]),t("h4",{attrs:{id:"出现的问题修改配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#出现的问题修改配置"}},[e._v("#")]),e._v(" 出现的问题修改配置")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("如果出现以下页面：Kibana server is not ready yet，说明Kibana没有找到ES节点")])]),e._v(" "),t("li",[t("p",[e._v("进入容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it kibana "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("vi config/kibana.yml")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ** THIS IS AN AUTO-GENERATED FILE **")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Default Kibana configuration for docker target")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("server.name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" kibana\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("server.host")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 中文配置")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("i18n.locale")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"zh-CN"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("elasticsearch.hosts")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://192.168.21.123:9200"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("xpack.monitoring.ui.container.elasticsearch.enabled")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("重启容器")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" restart kibana\n")])])])])]),e._v(" "),t("h4",{attrs:{id:"访问地址-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问地址-2"}},[e._v("#")]),e._v(" 访问地址")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//<IP>:<PORT>")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//192.168.21.123:5601/")])]),e._v("\n")])])]),t("h3",{attrs:{id:"es-健康检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-健康检查"}},[e._v("#")]),e._v(" es 健康检查")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//<IP>:9200/_cluster/health")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token header"}},[t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("http")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),t("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("//192.168.21.123:9200/_cluster/health")])]),e._v("\n")])])]),t("h4",{attrs:{id:"集群状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群状态"}},[e._v("#")]),e._v(" 集群状态")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("cluster_name")]),e._v("集群名称")]),e._v(" "),t("li",[t("code",[e._v("status")]),e._v("集群状态"),t("code",[e._v("green")]),e._v("代表健康；"),t("code",[e._v("yellow")]),e._v("代表分配了所有主分片，但至少缺少一个副本，此时集群数据仍旧完整；"),t("code",[e._v("red")]),e._v("代表部分主分片不可用，可能已经丢失数据。")]),e._v(" "),t("li",[t("code",[e._v("number_of_nodes")]),e._v("代表在线的节点总数量")]),e._v(" "),t("li",[t("code",[e._v("number_of_data_nodes")]),e._v("代表在线的数据节点的数量")]),e._v(" "),t("li",[t("code",[e._v("active_shards")]),e._v("存活的分片数量")]),e._v(" "),t("li",[t("code",[e._v("active_primary_shards")]),e._v("存活的主分片数量 正常情况下 "),t("code",[e._v("shards")]),e._v("的数量是"),t("code",[e._v("pri")]),e._v("的两倍")]),e._v(" "),t("li",[t("code",[e._v("relocating_shards")]),e._v("迁移中的分片数量，正常情况为 0")]),e._v(" "),t("li",[t("code",[e._v("initializing_shards")]),e._v("初始化中的分片数量，正常情况为 0")]),e._v(" "),t("li",[t("code",[e._v("unassigned_shards")]),e._v("未分配的分片，正常情况为 0")]),e._v(" "),t("li",[t("code",[e._v("delayed_unassigned_shards")])]),e._v(" "),t("li",[t("code",[e._v("number_of_pending_tasks")]),e._v("，准备中的任务，任务指迁移分片等，正常情况为 0")]),e._v(" "),t("li",[t("code",[e._v("number_of_in_flight_fetch")])]),e._v(" "),t("li",[t("code",[e._v("task_max_waiting_in_queue_millis")]),e._v("任务最长等待时间")]),e._v(" "),t("li",[t("code",[e._v("active_shards_percent_as_number")]),e._v("正常分片百分比 正常情况为 100%")])]),e._v(" "),t("h4",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("/_cat/allocation")]),e._v("      \t#查看单节点的shard分配整体情况")]),e._v(" "),t("li",[t("code",[e._v("/_cat/shards")]),e._v("          \t#查看各shard的详细情况")]),e._v(" "),t("li",[t("code",[e._v("/_cat/shards/{index}")]),e._v("  \t#查看指定分片的详细情况")]),e._v(" "),t("li",[t("code",[e._v("/_cat/master")]),e._v("          \t#查看master节点信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/nodes")]),e._v("           \t#查看所有节点信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/indices")]),e._v("         \t#查看集群中所有index的详细信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/indices/{index}")]),e._v(" \t#查看集群中指定index的详细信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/segments")]),e._v("        \t#查看各index的segment详细信息,包括segment名, 所属shard, 内存(磁盘)占用大小, 是否刷盘")]),e._v(" "),t("li",[t("code",[e._v("/_cat/segments/{index}")]),e._v("\t#查看指定index的segment详细信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/count")]),e._v("           \t#查看当前集群的doc数量")]),e._v(" "),t("li",[t("code",[e._v("/_cat/count/{index}")]),e._v("   \t#查看指定索引的doc数量")]),e._v(" "),t("li",[t("code",[e._v("/_cat/recovery")]),e._v("        \t#查看集群内每个shard的recovery过程.调整replica。")]),e._v(" "),t("li",[t("code",[e._v("/_cat/recovery/{index}")]),e._v("\t#查看指定索引shard的recovery过程")]),e._v(" "),t("li",[t("code",[e._v("/_cat/health")]),e._v("          \t#查看集群当前状态：红、黄、绿")]),e._v(" "),t("li",[t("code",[e._v("/_cat/pending_tasks")]),e._v("   \t#查看当前集群的pending task")]),e._v(" "),t("li",[t("code",[e._v("/_cat/aliases")]),e._v("         \t#查看集群中所有alias信息,路由配置等")]),e._v(" "),t("li",[t("code",[e._v("/_cat/aliases/{alias}")]),e._v(" \t#查看指定索引的alias信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/thread_pool")]),e._v("     \t#查看集群各节点内部不同类型的threadpool的统计信息,")]),e._v(" "),t("li",[t("code",[e._v("/_cat/plugins")]),e._v("         \t#查看集群各个节点上的plugin信息")]),e._v(" "),t("li",[t("code",[e._v("/_cat/fielddata")]),e._v("       \t#查看当前集群各个节点的fielddata内存使用情况")]),e._v(" "),t("li",[t("code",[e._v("/_cat/fielddata/{fields}")]),e._v("\t#查看指定field的内存使用情况,里面传field属性对应的值")]),e._v(" "),t("li",[t("code",[e._v("/_cat/nodeattrs")]),e._v("\t\t\t#查看单节点的自定义属性")]),e._v(" "),t("li",[t("code",[e._v("/_cat/repositories")]),e._v("\t\t#输出集群中注册快照存储库")]),e._v(" "),t("li",[t("code",[e._v("/_cat/templates")]),e._v("\t\t\t#输出当前正在存在的模板信息")])]),e._v(" "),t("h4",{attrs:{id:"健康值状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#健康值状态"}},[e._v("#")]),e._v(" 健康值状态")]),e._v(" "),t("ol",[t("li",[e._v("Green：所有Primary和Replica均为active，集群健康")]),e._v(" "),t("li",[e._v("Yellow：至少一个Replica不可用，但是所有Primary均为active，数据仍然是可以保证完整性的")]),e._v(" "),t("li",[e._v("Red：至少有一个Primary为不可用状态，数据不完整，集群不可用")])]),e._v(" "),t("h2",{attrs:{id:"es节点有哪些类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es节点有哪些类型"}},[e._v("#")]),e._v(" ES节点有哪些类型")]),e._v(" "),t("h3",{attrs:{id:"_1-主节点-master-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-主节点-master-node"}},[e._v("#")]),e._v(" 1. 主节点（Master node）")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("主节点的主要职责是负责集群层面的相关操作，管理集群变更，如创建或删除索引，跟踪哪些节点是集群的一部分，并决定哪些分片分配给哪些相关的节点")])]),e._v(" "),t("li",[t("p",[e._v("主节点也可以作为数据节点，但稳定的主节点对集群的健康是非常重要的，默认情况下任何一个集群中的节点都有可能被选为主节点，索引数据和搜索查询等操作会占用大量的cpu，内存，io资源，为了确保一个集群的稳定，分离主节点和数据节点是一个比较好的选择")])]),e._v(" "),t("li",[t("p",[e._v("通过配置"),t("code",[e._v("node.master: true")]),e._v("(默认)使节点具有被选举为"),t("code",[e._v("Master")]),e._v("的资格。主节点是全局唯一的，从有资格成为"),t("code",[e._v("Master")]),e._v("的节点中选举")])]),e._v(" "),t("li",[t("p",[e._v("为了防止数据丢失，每个主节点应该知道有资格升为主节点的数量，默认为1，为了避免网络分区出现多主的情况，配置"),t("code",[e._v("discovery.zen.minimun_master_nodes")]),e._v("原则上最小值应该为："),t("code",[e._v("(master_eligible_nodes/2)+1")])])]),e._v(" "),t("li",[t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.master")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_2-数据节点-data-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据节点-data-node"}},[e._v("#")]),e._v(" 2. 数据节点（Data node）")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("数据节点主要是存储索引数据的节点，执行数据相关操作：CRUD、搜索，聚合操作等。数据节点对cpu，内存，I/O要求较高， 在优化的时候需要监控数据节点的状态，当资源不够的时候，需要在集群中添加新的节点。")])]),e._v(" "),t("li",[t("p",[e._v("通过配置"),t("code",[e._v("node.data: true")]),e._v("(默认来是一个节点成为数据节点)，也可以通过下面配置创建一个数据节点")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.master")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.ingest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_3-预处理节点-ingest-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-预处理节点-ingest-node"}},[e._v("#")]),e._v(" 3. 预处理节点（ingest node）")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("这是从5.0版本开始引入的概念。预处理操作运行在索引文档之前，即写入数据之前，通过事先定义好的一系列"),t("code",[e._v("processors")]),e._v("(处理器)和"),t("code",[e._v("pipeline")]),e._v("（管道），对数据进行某种转换、富化。"),t("code",[e._v("processors")]),e._v("和"),t("code",[e._v("pipeline")]),e._v("拦截"),t("code",[e._v("bulk")]),e._v("和"),t("code",[e._v("index")]),e._v("请求，在应用相关操作后将文档传回给"),t("code",[e._v("index")]),e._v("或"),t("code",[e._v("bulk API")])])]),e._v(" "),t("li",[t("p",[e._v("默认情况下，在所有的节点启用"),t("code",[e._v("ingest")]),e._v("。如果想在某个节点上禁用"),t("code",[e._v("ingest")]),e._v("，则可以填写配置"),t("code",[e._v("node.ingest: false")]),e._v("，也可以通过下面的配置创建一个仅用于预处理的节点：")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.master")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.ingest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_4-协调节点-coordinating-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-协调节点-coordinating-node"}},[e._v("#")]),e._v(" 4. 协调节点（Coordinating node）")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("客户端请求可以发送到集群的任何节点，每个节点都知道任意文档所处的位置，然后转发这些请求，收集数据并返回给客户端，处理客户端请求的节点称为协调节点。")])]),e._v(" "),t("li",[t("p",[e._v("协调节点将请求转发给保存数据的数据节点。每个数据节点在本地执行请求，并将结果返回给协调节点。协调节点收集完数据后，将每个数据节点的结果合并为单个全局结果。对结果收集和排序的过程可能需要很多CPU和内存资源。")])]),e._v(" "),t("li",[t("p",[e._v("通过下面配置创建一个仅用于协调的节点：")]),e._v(" "),t("div",{staticClass:"language-yaml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.master")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("node.ingest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("false")]),e._v("\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"_5-部落节点-trible-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-部落节点-trible-node"}},[e._v("#")]),e._v(" 5. 部落节点（Trible node）")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("tribes")]),e._v("功能允许部落节点在多个集群之间充当联合客户端")]),e._v(" "),t("li",[e._v("部落节点是一个单独的节点，其主要工作是嗅探远程集群的集群状态，并将它们合并在一起。为了做到这一点，它加入了所有的远程集群，使它成为一个非特殊的节点，它不属于自己的集群，而是加入了多个集群。")]),e._v(" "),t("li",[e._v("也被称为"),t("code",[e._v("跨集群搜索")]),e._v("的功能，该功能"),t("code",[e._v("允许用户不仅跨本地索引，而且跨集群撰写搜索")]),e._v("。这意味着可以搜索属于其他远程集群的数据。")])]),e._v(" "),t("h3",{attrs:{id:"_6-投票节点-voting-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-投票节点-voting-node"}},[e._v("#")]),e._v(" 6. 投票节点（voting node）")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("node.voting_only: true")]),e._v("（仅投票节点，即使配置了"),t("code",[e._v("data.master: true")]),e._v("，也不会参选")]),e._v(" "),t("li",[e._v("仍然可以作为数据节点"),t("code",[e._v("node.data: true")])])]),e._v(" "),t("h2",{attrs:{id:"es如何实现高可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es如何实现高可用"}},[e._v("#")]),e._v(" ES如何实现高可用")]),e._v(" "),t("ol",[t("li",[e._v("ES在分配单个索引的分片时会将每个分片尽可能分配到更多的节点上。但是，实际情况取决于集群拥有的分片和索引的数量以及它们的大小，不一定总是能均匀地分布")]),e._v(" "),t("li",[e._v("ES不允许Primary和它的Replica放在同一个节点中，并且同一个节点不接受完全相同的两个Replica")]),e._v(" "),t("li",[e._v("同一个节点允许多个索引的分片同时存在")])]),e._v(" "),t("h2",{attrs:{id:"es容错机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es容错机制"}},[e._v("#")]),e._v(" ES容错机制")]),e._v(" "),t("ol",[t("li",[e._v("Master选举（假如宕机节点是Master）\n"),t("ul",[t("li",[e._v("脑裂：可能会产生多个Master节点")]),e._v(" "),t("li",[e._v("解决：discovery.zen.minimum_master_nodes=N/2+1")])])]),e._v(" "),t("li",[t("code",[e._v("Replica")]),e._v("容错，新的（或者原有）Master节点会将丢失的Primary对应的某个副本提升为Primary")]),e._v(" "),t("li",[e._v("Master节点会尝试重启故障机")]),e._v(" "),t("li",[e._v("数据同步，Master会将宕机期间丢失的数据同步到重启机器对应的分片上去")])]),e._v(" "),t("h2",{attrs:{id:"如何提高es分布式系统的可用性及性能最大化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何提高es分布式系统的可用性及性能最大化"}},[e._v("#")]),e._v(" 如何提高ES分布式系统的可用性及性能最大化")]),e._v(" "),t("ol",[t("li",[e._v("每台节点的"),t("code",[e._v("shard")]),e._v("数量越少，每个"),t("code",[e._v("shard")]),e._v("分配的CPU、内存和IO资源越多，单个"),t("code",[e._v("shard")]),e._v("的性能越好，当一台机器一个"),t("code",[e._v("shard")]),e._v("时，单个"),t("code",[e._v("shard")]),e._v("性能最好")]),e._v(" "),t("li",[e._v("稳定的"),t("code",[e._v("Master节点")]),e._v("对于集群的健康非常重要！理论上讲，应该尽可能的减轻"),t("code",[e._v("Master节点")]),e._v("的压力，分片数量越多，"),t("code",[e._v("Master节点")]),e._v("维护管理"),t("code",[e._v("shard")]),e._v("的任务越重，并且节点可能就要承担更多的数据转发任务，可增加"),t("code",[e._v("仅协调节点")]),e._v("来缓解"),t("code",[e._v("Master节点")]),e._v("和"),t("code",[e._v("Data节点")]),e._v("的压力，但是在集群中添加过多的"),t("code",[e._v("仅协调节点")]),e._v("会增加整个集群的负担，因为选择的主节点必须等待每个节点的集群状态更新确认。")]),e._v(" "),t("li",[e._v("反过来说，如果相同资源分配相同的前提下，"),t("code",[e._v("shard")]),e._v("数量越少，单个"),t("code",[e._v("shard")]),e._v("的体积越大，查询性能越低，速度越慢，这个取舍应根据实际集群状况和结合应用场景等因素综合考虑")]),e._v(" "),t("li",[t("code",[e._v("data节点")]),e._v("和"),t("code",[e._v("Master节点")]),e._v("一定要分开，集群规模越大，这样做的意义也就越大")]),e._v(" "),t("li",[t("code",[e._v("data节点")]),e._v("处理与数据相关的操作，例如"),t("code",[e._v("CRUD")]),e._v("，搜索和聚合。这些操作是"),t("code",[e._v("I/O")]),e._v("，内存和"),t("code",[e._v("CPU")]),e._v("密集型的，所以他们需要更高配置的服务器以及更高的带宽，并且集群的性能冗余非常重要")]),e._v(" "),t("li",[e._v("由于"),t("code",[e._v("仅投票节")]),e._v("不参与"),t("code",[e._v("Master")]),e._v("竞选，所以和真正的"),t("code",[e._v("Master")]),e._v("节点相比，它需要的内存和CPU较少。但是，所有"),t("code",[e._v("候选节点")]),e._v("以及"),t("code",[e._v("仅投票节点")]),e._v("都可能是"),t("code",[e._v("数据节点")]),e._v("，所以他们都需要快速稳定低延迟的网络")]),e._v(" "),t("li",[e._v("高可用性（HA）群集至少需要三个主节点，其中"),t("code",[e._v("至少两个不是仅投票节点")]),e._v("。即使其中一个节点发生故障，这样的群集也将能够选举一个主节点。生产环境最好设置3台仅Master候选节点（node.master = true\t node.data = true）")]),e._v(" "),t("li",[e._v("为确保集群仍然可用，集群不能同时停止投票配置中的一半或更多节点。只要有一半以上的投票节点可用，集群仍可以正常工作。这意味着，如果存在三个或四个主节点合格的节点，则集群可以容忍其中一个节点不可用。如果有两个或更少的主机资格节点，则它们必须都保持可用")])]),e._v(" "),t("h2",{attrs:{id:"master选举流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master选举流程"}},[e._v("#")]),e._v(" Master选举流程")]),e._v(" "),t("h3",{attrs:{id:"findmaster"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#findmaster"}},[e._v("#")]),e._v(" findMaster")]),e._v(" "),t("h2",{attrs:{id:"简单curd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单curd"}},[e._v("#")]),e._v(" 简单CURD")]),e._v(" "),t("h3",{attrs:{id:"创建索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建索引"}},[e._v("#")]),e._v(" 创建索引")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nPUT /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("?pretty\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nPUT /product?pretty\n")])])]),t("h3",{attrs:{id:"查询索引状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询索引状态"}},[e._v("#")]),e._v(" 查询索引状态")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("GET /_cat/indices?v\n")])])]),t("h3",{attrs:{id:"删除索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除索引"}},[e._v("#")]),e._v(" 删除索引")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nDELETE /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("?pretty\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nDELETE /product?pretty\n")])])]),t("h3",{attrs:{id:"查看索引信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看索引信息"}},[e._v("#")]),e._v(" 查看索引信息")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看索引 map 映射信息")]),e._v("\nGET /product\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看索引数据")]),e._v("\nGET /product/_search\n")])])]),t("h3",{attrs:{id:"插入数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[e._v("#")]),e._v(" 插入数据")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("PUT /product/_doc/1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xiaomi phone"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"shouji zhong de zhandouji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3999")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xingjiabi"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"fashao"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"buka"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nPUT /product/_doc/2\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xiaomi nfc phone"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"zhichi quangongneng nfc,shouji zhong de jianjiji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("4999")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xingjiabi"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"fashao"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gongjiaoka"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nPUT /product/_doc/3\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nfc phone"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"shouji zhong de hongzhaji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2999")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xingjiabi"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"fashao"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"menjinka"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nPUT /product/_doc/4\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xiaomi erji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"erji zhong de huangmenji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("999")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"low"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"bufangshui"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yinzhicha"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nPUT /product/_doc/5\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"hongmi erji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"erji zhong de kendeji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("399")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"lowbee"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xuhangduan"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"zhiliangx"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h3",{attrs:{id:"查询数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询数据"}},[e._v("#")]),e._v(" 查询数据")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查询单个document")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nGET /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_doc/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nGET /product/_doc/1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看所有的document")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nGET /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_search\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nGET /product/_search\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查询多个结果的排序")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nGET /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_search?sort"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("排序的字段:"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("asc"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("desc"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nGET /product/_search?sort"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("price\nGET /product/_search?sort"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("price:asc\nGET /product/_search?sort"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("price:desc\nGET /product/_search?q"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("price:2999"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("sort")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("price:desc\n")])])]),t("h3",{attrs:{id:"更新数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[e._v("#")]),e._v(" 更新数据")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 全量更新（完全覆盖）")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nPUT /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_doc/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\njson格式的数据\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nPUT /product/_doc/1\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"name"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xiaomi phone"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"desc"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"shouji zhong de zhandouji"')]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3999")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tags"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"xingjiabi"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"fashao"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"buka"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 增量更新")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nPOST /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_doc/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_update\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"doc"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" json格式的数据\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nPOST /product/_doc/1/_update\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"doc"')]),e._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"price"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("23999")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("h3",{attrs:{id:"删除数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数据"}},[e._v("#")]),e._v(" 删除数据")]),e._v(" "),t("blockquote",[t("p",[e._v("先逻辑删除，没有立即删除，后续才会物理删除")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 格式")]),e._v("\nDELETE /"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("indexName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("/_doc/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# demo")]),e._v("\nDELETE /product/_doc/1\n")])])]),t("h2",{attrs:{id:"es-常用查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-常用查询"}},[e._v("#")]),e._v(" ES 常用查询")]),e._v(" "),t("h3",{attrs:{id:"_1-search-timeout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-search-timeout"}},[e._v("#")]),e._v(" 1. search timeout")]),e._v(" "),t("ol",[t("li",[e._v("设置：默认没有"),t("code",[e._v("timeout")]),e._v("，如果设置了"),t("code",[e._v("timeout")]),e._v("，那么会执行"),t("code",[e._v("timeout")]),e._v("机制")]),e._v(" "),t("li",[t("code",[e._v("timeout")]),e._v("机制：假设用户查询结果有1W条数据，但是需要10s才能查询完毕，但是用户设置了1s的"),t("code",[e._v("timeout")]),e._v("，那么不管当前一共查询到了多少数据，都会在1s后停止查询，并返回当前数据")]),e._v(" "),t("li",[e._v("用法：GET /product/_search?timeout=1s/ms/m")])]),e._v(" "),t("h3",{attrs:{id:"_2-query-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-query-string"}},[e._v("#")]),e._v(" 2. query_string")]),e._v(" "),t("ol",[t("li",[e._v("查询所有：GET /product/_search")]),e._v(" "),t("li",[e._v("带参数：GET /product/_search?q=name:xiaomi")]),e._v(" "),t("li",[e._v("分页+排序：GET /product/_search?from=0&size=2&sort=price:asc")])]),e._v(" "),t("h3",{attrs:{id:"_3-match-all-匹配所有"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-match-all-匹配所有"}},[e._v("#")]),e._v(" 3. match_all：匹配所有")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query":{\n    "match_all": {}\n  }\n}\n')])])]),t("h3",{attrs:{id:"_4-match-name中包含-nfc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-match-name中包含-nfc"}},[e._v("#")]),e._v(" 4. match：name中包含“nfc”")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "match": {\n      "name": "nfc"\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_5-sort-按照加个倒序排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-sort-按照加个倒序排序"}},[e._v("#")]),e._v(" 5. sort：按照加个倒序排序")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "multi_match": {\n      "query": "nfc",\n      "fields": ["name","desc"]\n    }\n  },\n  "sort": [\n    {\n      "price": "desc"\n    }\n  ]\n}\n')])])]),t("h3",{attrs:{id:"_6-multi-match-根据多个字段查询一个关键词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-multi-match-根据多个字段查询一个关键词"}},[e._v("#")]),e._v(" 6. multi_match：根据多个字段查询一个关键词")]),e._v(" "),t("blockquote",[t("p",[e._v("name和desc中包含“nfc”")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "multi_match": {\n      "query": "nfc",\n      "fields": ["name","desc"]\n    }\n  },\n  "sort": [\n    {\n      "price": "desc"\n    }\n  ]\n}\n')])])]),t("h3",{attrs:{id:"_7-source-元数据-想要查询多个字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-source-元数据-想要查询多个字段"}},[e._v("#")]),e._v(" 7. _source：元数据，想要查询多个字段")]),e._v(" "),t("blockquote",[t("p",[e._v("① 例子中为只查询“name”和“price”字段。")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query":{\n    "match": {\n      "name": "nfc"\n    }\n  },\n  "_source": ["name","price"]\n}\n')])])]),t("h3",{attrs:{id:"_8-分页-查询第一页-每页两条数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-分页-查询第一页-每页两条数据"}},[e._v("#")]),e._v(" 8. 分页：查询第一页（每页两条数据）")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query":{\n    "match_all": {}\n  },\n  "sort": [\n    {\n      "price": "asc"\n    }\n  ], \n  "from": 0,\n  "size": 2\n}\n')])])]),t("h3",{attrs:{id:"_9-全文检索-term-不会被分词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-全文检索-term-不会被分词"}},[e._v("#")]),e._v(" 9. 全文检索：term：不会被分词")]),e._v(" "),t("blockquote",[t("p",[e._v("查询不会被分词，eq相等匹配倒排索引；文档内容会被分词，相当于eq的是倒排索引")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "term": {\n      "name": "nfc"\n    }\n  }\n}\nGET /product/_search\n{\n  "query": {\n    "term": {\n      "name": "nfc phone" 这里因为没有分词，所以查询没有结果\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_10-全文检索-match-会被分词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-全文检索-match-会被分词"}},[e._v("#")]),e._v(" 10. 全文检索：match：会被分词")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "match": {\n      "name": "xiaomi nfc zhineng phone"\n    }\n  }\n}\n#验证分词\nGET /_analyze \n{\n  "analyzer": "standard",\n  "text":"xiaomi nfc zhineng phone"\n}\n')])])]),t("h3",{attrs:{id:"_11-短语搜索-match-phrase-和全文检索相反"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-短语搜索-match-phrase-和全文检索相反"}},[e._v("#")]),e._v(" 11. 短语搜索：match_phrase：和全文检索相反")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "match_phrase": {\n      "name": "nfc phone"\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_12-查询过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-查询过滤"}},[e._v("#")]),e._v(" 12. 查询过滤")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("bool")]),e._v("：可以"),t("code",[e._v("组合多个查询条件")]),e._v("，"),t("code",[e._v("bool")]),e._v("查询也是采用"),t("code",[e._v("more_matches_is_better")]),e._v("的机制，因此满足"),t("code",[e._v("must")]),e._v("和"),t("code",[e._v("should")]),e._v("子句的文档将会合并起来计算分值")]),e._v(" "),t("li",[t("code",[e._v("must")]),e._v("："),t("code",[e._v("必须满足")]),e._v("（子查询必须出现在匹配的文档中，并将有助于得分）")]),e._v(" "),t("li",[t("code",[e._v("should")]),e._v("："),t("code",[e._v("可能满足")]),e._v(" "),t("code",[e._v("or")]),e._v("（子查询可能会出现在匹配的文档中）")]),e._v(" "),t("li",[t("code",[e._v("must_not")]),e._v("："),t("code",[e._v("必须不满足")]),e._v(" "),t("code",[e._v("不计算相关度分数")]),e._v(" "),t("code",[e._v("not")]),e._v("（子查询不得出现在匹配的文档中，子句在过滤器上下文中执行，这意味着计分被忽略，并且子句被视为用于缓存）")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v("："),t("code",[e._v("过滤器")]),e._v(" "),t("code",[e._v("不计算相关度分数")]),e._v("，"),t("code",[e._v("cache")]),e._v("（子查询必须出现在匹配的文档中，但是不像"),t("code",[e._v("must")]),e._v("查询的分数将忽略。"),t("code",[e._v("filter")]),e._v("子句在"),t("code",[e._v("filter")]),e._v("上下文中优先执行，这意味着计分被忽略，并且子句被考虑用于缓存）")]),e._v(" "),t("li",[t("code",[e._v("minimum_should_match")]),e._v("：参数指定"),t("code",[e._v("should")]),e._v("返回的文档必须匹配的子句的数量或百分比。如果"),t("code",[e._v("bool")]),e._v("查询包含至少一个"),t("code",[e._v("should")]),e._v("子句，而没有"),t("code",[e._v("must")]),e._v("或"),t("code",[e._v("filter")]),e._v("子句，则默认值为1。否则，默认值为0")])]),e._v(" "),t("h4",{attrs:{id:"_1-bool单条件查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-bool单条件查询"}},[e._v("#")]),e._v(" 1. bool单条件查询")]),e._v(" "),t("blockquote",[t("p",[e._v("首先筛选"),t("code",[e._v("name")]),e._v("包含"),t("code",[e._v("xiaomi phone")]),e._v("并且价格大于1999的数据（不排序），然后搜索"),t("code",[e._v("name")]),e._v("包含"),t("code",[e._v("xiaomi")]),e._v("and "),t("code",[e._v("desc")]),e._v(" 包含"),t("code",[e._v("shouji")])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "bool":{\n      "must": [\n        {"match": { "name": "xiaomi"}},\n        {"match": {"desc": "shouji"}}\n      ],\n      "filter": [\n        {"match_phrase":{"name":"xiaomi phone"}},\n        {"range": {\n          "price": {\n            "gt": 1999\n          }\n        }}\n      ]\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"_2-bool多条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-bool多条件"}},[e._v("#")]),e._v(" 2. bool多条件")]),e._v(" "),t("blockquote",[t("p",[e._v("name包含xiaomi 不包含erji 描述里包不包含nfc都可以，价钱要大于等于4999")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "bool": {\n      # name中必须包含"xiaomi"\n      "must": [\n        {\n          "match": {"name": "xiaomi"}\n        }\n      ],\n      # name中必须不能包含"erji"\n      "must_not": [\n        {\n          "match": {"name": "erji"}\n        }\n      ],\n      # should中至少满足0个条件，参见下面的 minimum_should_match 的解释\n      "should": [\n        {\n          "match": {"desc": "nfc"}\n        }\n      ],\n      # 筛选价格大于4999的doc\n      "filter": [\n        {\n          "range": {\n            "price": {"gt": 4999}\n          }\n        }\n      ]\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"_3-minimum-should-match的嵌套查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-minimum-should-match的嵌套查询"}},[e._v("#")]),e._v(" 3. minimum_should_match的嵌套查询")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "bool":{\n      "must": [\n        {"match": { "name": "nfc"}}\n      ],\n      "should": [\n        {"range": {\n          "price": {"gt":1999}\n        }},\n         {"range": {\n          "price": {"gt":3999}\n        }}\n      ],\n      "minimum_should_match": 1\n    }\n  }\n}\n# demo\nGET /product/_search\n{\n  "query": {\n    "bool": {\n      "filter": {\n        "bool": {\n          "should": [\n            { "range": {"price": {"gt": 1999}}},\n            { "range": {"price": {"gt": 3999}}}\n          ],\n          "must": [\n            { "match": {"name": "nfc"}}\n          ]\n        }\n      }\n    }\n  }\n}\n')])])]),t("blockquote",[t("ol",[t("li",[e._v("当"),t("code",[e._v("bool")]),e._v("处在"),t("code",[e._v("query")]),e._v("上下文中时，如果"),t("code",[e._v("must")]),e._v("或者"),t("code",[e._v("filter")]),e._v("匹配了"),t("code",[e._v("doc")]),e._v("，那么"),t("code",[e._v("should")]),e._v("即便一条都不满足也可以召回"),t("code",[e._v("doc")])]),e._v(" "),t("li",[e._v("当"),t("code",[e._v("bool")]),e._v("处在父"),t("code",[e._v("bool")]),e._v("的"),t("code",[e._v("filter")]),e._v("上下文中时 或者 "),t("code",[e._v("bool")]),e._v("处在"),t("code",[e._v("query")]),e._v("上下文且没有"),t("code",[e._v("must")]),e._v("/"),t("code",[e._v("filter")]),e._v("子句的时候，"),t("code",[e._v("should")]),e._v("至少匹配1个才能召回"),t("code",[e._v("doc")])])]),e._v(" "),t("p",[e._v("如果需要类似这种查询：where name='nfc phone' and (price='2999' or desc='shouji zhong de hongzhaji')，就有2种做法：")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 走嵌套bool，让should进入filter上下文：\nGET /product/_search\n{\n  "query": {\n    "bool": {\n      "filter": [\n        [\n          {"match_phrase": {"name": "nfc phone"}},\n          {"term": {"name": "nfc"}}\n        ],\n        {\n          "bool": {\n            "should": [\n              { "match_phrase": {"price": "2999"}},\n              { "match_phrase": {"desc": "shouji zhong de hongzhaji"}}\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n# 走单bool，query上下文，需要显式指定minimum_should_match=1\nGET /product/_search\n{\n  "query": {\n    "bool": {\n      "filter": [\n        [\n          {"match_phrase": {"name": "nfc phone"}},\n          {"term": {"name": "nfc"}}\n        ]\n      ],\n      "should": [\n        { "match_phrase": {"price": "2999"}},\n        { "match_phrase": {"desc": "shouji zhong de hongzhaji"}}\n      ],\n      "minimum_should_match": 1\n    }\n  }\n}\n# 其实作为一个可扩展的查询接口，一般来说嵌套bool表达力更丰富，扩展性更好，所以不建议用第二种方式开发业务\n')])])]),t("h4",{attrs:{id:"_4-constant-score-不计算得分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-constant-score-不计算得分"}},[e._v("#")]),e._v(" 4. constant_score：不计算得分")]),e._v(" "),t("blockquote",[t("p",[e._v("当我们不关心检索词频率"),t("code",[e._v("TF")]),e._v("（"),t("code",[e._v("Term Frequency")]),e._v("）对搜索结果排序的影响时，可以使用"),t("code",[e._v("constant_score")]),e._v("将查询语句"),t("code",[e._v("query")]),e._v("或者过滤语句"),t("code",[e._v("filter")]),e._v("包装起来")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "constant_score":{\n      "filter": {\n        "bool": {\n          "should":[\n            {"term":{"name":"xiaomi"}},\n            {"term":{"name":"nfc"}}\n            ],\n          "must_not":[\n            {"term":{"name":"erji"}}\n            ]\n        }\n      },\n      "boost": 1.2\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_13-compound-queries组合查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-compound-queries组合查询"}},[e._v("#")]),e._v(" 13. Compound queries组合查询")]),e._v(" "),t("blockquote",[t("p",[e._v("想要一台带"),t("code",[e._v("NFC")]),e._v("功能的 或者 小米的手机 但是不要耳机")])]),e._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" product "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("where")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")]),e._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("like")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%xiaomi%"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("or")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")]),e._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("like")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%nfc%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")]),e._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("`")])]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("not")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("LIKE")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%erji%'")]),e._v("\n")])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "constant_score":{\n      "filter": {\n        "bool": {\n          "should":[\n            {"term":{"name":"xiaomi"}},\n            {"term":{"name":"nfc"}}\n            ],\n          "must_not":[\n            {"term":{"name":"erji"}}\n            ]\n        }\n      },\n      "boost": 1.2\n    }\n  }\n}\n')])])]),t("blockquote",[t("p",[e._v("搜索一台xiaomi nfc phone或者一台满足 是一台手机 并且 价格小于等于2999")])]),e._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" product "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" NAME "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("LIKE")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%xiaomi nfc phone%'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("OR")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("NAME "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("LIKE")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%phone%'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" price "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("399")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" price "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("999")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "constant_score": {\n      "filter": { \n        "bool":{\n          "should":[\n            {\n              "match_phrase": {\n                "name":"xiaomi nfc phone"\n              }\n            },\n            {\n              "bool":{\n                "must":[\n                  {"term":{"name":"phone"}},\n                  {"range":{"price":{"lte":"2999"}}}\n                  ]\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_14-highlight-search高亮查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-highlight-search高亮查询"}},[e._v("#")]),e._v(" 14. Highlight search高亮查询")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n    "query" : {\n        "match_phrase" : {\n            "name" : "nfc phone"\n        }\n    },\n    "highlight":{\n      "fields":{\n         "name":{}\n      }\n    }\n}\n')])])]),t("h3",{attrs:{id:"_15-deep-paging"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-deep-paging"}},[e._v("#")]),e._v(" 15. Deep paging")]),e._v(" "),t("h4",{attrs:{id:"_1-deep-paging概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-deep-paging概念"}},[e._v("#")]),e._v(" 1. deep paging概念")]),e._v(" "),t("p",[t("strong",[e._v("查询的很深，比如一个索引有三个 "),t("code",[e._v("primary shard")]),e._v("，分别存储了"),t("code",[e._v("6000")]),e._v("条数据，我们要得到第"),t("code",[e._v("100")]),e._v("页的数据（每页"),t("code",[e._v("10")]),e._v("条），类似这种情况就叫"),t("code",[e._v("deep paging")])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query":{\n    "match_all": {}\n  },\n  "sort": [\n    {\n      "price": "asc"\n    }\n  ], \n  "from": 0,\n  "size": 2\n}\n')])])]),t("h4",{attrs:{id:"_2-查询原理-如何得到第100页的10条数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询原理-如何得到第100页的10条数据"}},[e._v("#")]),e._v(" 2. 查询原理：如何得到第100页的10条数据？")]),e._v(" "),t("h5",{attrs:{id:"错误的做法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误的做法"}},[e._v("#")]),e._v(" 错误的做法")]),e._v(" "),t("p",[e._v("在每个 "),t("code",[e._v("shard")]),e._v(" 中搜索"),t("code",[e._v("990")]),e._v("到"),t("code",[e._v("999")]),e._v("这"),t("code",[e._v("10")]),e._v("条数据，然后用这"),t("code",[e._v("30")]),e._v("条数据排序，排序之后取"),t("code",[e._v("10")]),e._v("条数据就是要搜索的数据，这种做法是错的；因为3个 "),t("code",[e._v("shard")]),e._v(" 中的数据的 "),t("code",[e._v("_score")]),e._v(" 分数不一样，可能这某一个 "),t("code",[e._v("shard")]),e._v(" 中第一条数据的 "),t("code",[e._v("_score")]),e._v(" 分数比另一个 "),t("code",[e._v("shard")]),e._v(" 中第"),t("code",[e._v("1000")]),e._v("条都高，所以在每个 "),t("code",[e._v("shard")]),e._v(" 中搜索"),t("code",[e._v("990")]),e._v("到"),t("code",[e._v("999")]),e._v("这"),t("code",[e._v("10")]),e._v("条数据然后排序的做法是不正确的。")]),e._v(" "),t("h5",{attrs:{id:"正确的做法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正确的做法"}},[e._v("#")]),e._v(" 正确的做法")]),e._v(" "),t("p",[e._v("正确的做法是每个 "),t("code",[e._v("shard")]),e._v(" 把"),t("code",[e._v("0")]),e._v("到"),t("code",[e._v("999")]),e._v("条数据全部搜索出来（按排序顺序），然后全部返回给 "),t("code",[e._v("coordinate node")]),e._v("，由 "),t("code",[e._v("coordinate node")]),e._v(" 按 "),t("code",[e._v("_score")]),e._v(" 分数排序后，取出第"),t("code",[e._v("100")]),e._v("页的"),t("code",[e._v("10")]),e._v("条数据，然后返回给客户端")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/elasticsearch-deep-paging.png",alt:"elasticsearch-deep-paging"}})]),e._v(" "),t("h4",{attrs:{id:"_3-性能问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能问题"}},[e._v("#")]),e._v(" 3. 性能问题")]),e._v(" "),t("ol",[t("li",[e._v("消耗网络带宽，因为所搜过深的话，各 "),t("code",[e._v("shard")]),e._v(" 要把数据传递给 "),t("code",[e._v("coordinate node")]),e._v("，这个过程是有大量数据传递的，消耗网络")]),e._v(" "),t("li",[e._v("消耗内存，各 "),t("code",[e._v("shard")]),e._v(" 要把数据传送给 "),t("code",[e._v("coordinate node")]),e._v("，这个传递回来的数据，是被 "),t("code",[e._v("coordinate node")]),e._v(" 保存在内存中的，这样会大量消耗内存")]),e._v(" "),t("li",[e._v("消耗"),t("code",[e._v("cup")]),e._v("，"),t("code",[e._v("coordinate node")]),e._v(" 要把传回来的数据进行排序，这个排序过程很消耗"),t("code",[e._v("cpu")])])]),e._v(" "),t("h4",{attrs:{id:"_4-结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-结论"}},[e._v("#")]),e._v(" 4. 结论")]),e._v(" "),t("p",[t("font",{attrs:{color:"red"}},[t("strong",[e._v("鉴于deep paging的性能问题，所有应尽量减少使用")])])],1),e._v(" "),t("h3",{attrs:{id:"_16-scroll-search"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-scroll-search"}},[e._v("#")]),e._v(" 16. Scroll search")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search?scroll=1m\n{\n  "query": {\n    "match_all": {}\n  },\n  "sort": [\n    {\n      "price": "desc"\n    }\n  ],\n  "size": 2\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /_search/scroll\n{\n  # 每次查询更新scroll的时间，相当于延期\n  "scroll":"1m"\n  "scroll_id": ""\n}\n')])])]),t("h4",{attrs:{id:"_1-基于scroll滚动技术实现大数据量搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于scroll滚动技术实现大数据量搜索"}},[e._v("#")]),e._v(" 1. 基于scroll滚动技术实现大数据量搜索")]),e._v(" "),t("p",[t("strong",[e._v("如果一次性要查出来比如10万条数据，那么性能会很差，此时一般会采取用scroll滚动查询，一批一批的查，直到所有数据都查询完为止。")])]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("scroll")]),e._v("搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的")])]),e._v(" "),t("li",[t("p",[e._v("采用基于"),t("code",[e._v("_doc")]),e._v("（不使用"),t("code",[e._v("_score")]),e._v("）进行排序的方式，性能较高")])]),e._v(" "),t("li",[t("p",[e._v("每次发送"),t("code",[e._v("scroll")]),e._v("请求，我们还需要指定一个"),t("code",[e._v("scroll")]),e._v("参数，指定一个"),t("code",[e._v("时间窗口")]),e._v("，每次搜索请求只要在这个事件窗口内能完成就可以了")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# sort默认是相关度排序（"sort":[{"FIELD":{"order":"desc"}}]）,不按_score排序，按_doc排序\n# size设置的是每页显示的记录数\n# 第一次查询会生成快照\nGET /lib3/user/_search?scroll=1m #这一批查询在一分钟内完成\n{\n\t"query":{\n\t\t"match":{}\n\t},\n\t"sort":[  \n\t\t"_doc"\n\t],\n\t"size":3 \n}\n# 第二次查询通过第一次的快照ID来查询，后面以此类推\nGET /_search/scroll\n{\n  "scroll":"1m", \n  "scroll_id":""\n}\n')])])])])]),e._v(" "),t("h4",{attrs:{id:"_2-基于-scroll-解决深度分页问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于-scroll-解决深度分页问题"}},[e._v("#")]),e._v(" 2. 基于 scroll 解决深度分页问题")]),e._v(" "),t("p",[t("strong",[e._v("原理上是对某次查询生成一个游标 "),t("code",[e._v("scroll_id")]),e._v(" ， 后续的查询只需要根据这个游标去取数据，直到结果集中返回的 "),t("code",[e._v("hits")]),e._v(" 字段为空，就表示遍历结束。")])]),e._v(" "),t("p",[t("font",{attrs:{color:"red"}},[t("strong",[e._v("注意")]),e._v("："),t("code",[e._v("scroll_id")]),e._v(" 的生成可以理解为建立了一个临时的"),t("code",[e._v("历史快照")]),e._v("，在此之后的增删改查等操作不会影响到这个快照的结果。")])],1),e._v(" "),t("p",[e._v("使用 curl 进行分页读取过程如下：")]),e._v(" "),t("ol",[t("li",[e._v("先获取第一个 scroll_id，url 参数包括 /index/_type/ 和 scroll，scroll 字段指定了scroll_id 的"),t("strong",[e._v("有效生存期，以分钟为单位，过期之后会被es 自动清理")]),e._v("。如果文档不需要特定排序，可以指定按照文档创建的时间返回会使迭代更高效")]),e._v(" "),t("li",[e._v("后续的文档读取上一次查询返回的"),t("code",[e._v("scroll_id")]),e._v(" 来不断的取下一页，如果"),t("code",[e._v("srcoll_id")]),e._v(" 的生存期很长，那么每次返回的 "),t("code",[e._v("scroll_id")]),e._v(" 都是一样的，直到该 "),t("code",[e._v("scroll_id")]),e._v(" 过期，才会返回一个新的 "),t("code",[e._v("scroll_id")]),e._v("。请求指定的 "),t("code",[e._v("scroll_id")]),e._v(" 时就不需要 /index/_type 等信息了。每读取一页都会重新设置 "),t("code",[e._v("scroll_id")]),e._v(" 的生存时间，所以这个时间只需要满足读取当前页就可以，不需要满足读取所有的数据的时间，1 分钟足以。")]),e._v(" "),t("li",[e._v("所有文档获取完毕之后，需要手动清理掉 "),t("code",[e._v("scroll_id")]),e._v(" 。虽然"),t("code",[e._v("es")]),e._v("会有自动清理机制，但是 "),t("code",[e._v("srcoll_id")]),e._v(" 的存在会耗费大量的资源来保存一份当前查询结果集映像，并且会占用文件描述符。所以用完之后要及时清理。使用 "),t("code",[e._v("es")]),e._v(" 提供的 "),t("code",[e._v("CLEAR_API")]),e._v(" 来删除指定的 "),t("code",[e._v("scroll_id")])])]),e._v(" "),t("h4",{attrs:{id:"_3-基于-search-after-实现深度分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-基于-search-after-实现深度分页"}},[e._v("#")]),e._v(" 3. 基于 search_after 实现深度分页")]),e._v(" "),t("p",[t("code",[e._v("search_after")]),e._v(" 是 "),t("code",[e._v("ES5.0")]),e._v(" 及之后版本提供的新特性，"),t("code",[e._v("search_after")]),e._v(" 有点类似 "),t("code",[e._v("scroll")]),e._v("，但是和 "),t("code",[e._v("scroll")]),e._v(" 又不一样，它提供一个活动的游标，通过上一次查询最后一条数据来进行下一次查询。"),t("code",[e._v("search_after")]),e._v(" 分页的方式和 "),t("code",[e._v("scroll")]),e._v(" 有一些显著的区别：首先它是"),t("strong",[e._v("根据上一页的最后一条数据来确定下一页的位置")]),e._v("，同时在分页请求的过程中，如果有索引数据的增删改查，这些变更也会实时的反映到游标上。")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("第一页的请求和正常的请求一样")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /order/info/_search\n{\n    "size": 10,\n    "query": {\n        "match_all" : {\n        }\n    },\n    "sort": [\n        {"date": "asc"}\n    ]\n}\n# 返回结果\n{\n    "_index": "zmrecall",\n    "_type": "recall",\n    "_id": "60310505115909",\n    "_score": null,\n    "_source": {\n      ...\n      "date": 1545037514\n    },\n    "sort": [\n    \t1545037514\n    ]\n  }\n')])])])]),e._v(" "),t("li",[t("p",[e._v("第二页的请求，使用第一页返回结果的最后一个数据的值，加上 "),t("code",[e._v("search_after")]),e._v(" 字段来取下一页。"),t("strong",[e._v("注意")]),e._v("：使用 "),t("code",[e._v("search_after")]),e._v(" 的时候要将 "),t("code",[e._v("from")]),e._v(" 置为 0 或 -1。")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('curl -XGET 127.0.0.1:9200/order/info/_search\n{\n    "size": 10,\n    "query": {\n        "match_all" : {\n        }\n    },\n    "search_after": [1545037514], # 这个值与上次查询最后一条数据的sort值一致，支持多个\n    "sort": [\n        {"date": "asc"}\n    ]\n}\n')])])])])]),e._v(" "),t("h4",{attrs:{id:"_4-需要注意的点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-需要注意的点"}},[e._v("#")]),e._v(" 4. 需要注意的点")]),e._v(" "),t("ol",[t("li",[e._v("如果 "),t("code",[e._v("search_after")]),e._v(" 中的关键字为654，那么654323的文档也会被搜索到，所以在选择 "),t("code",[e._v("search_after")]),e._v(" 的排序字段时需要谨慎，可以使用比如"),t("code",[e._v("文档的id")]),e._v("或者"),t("code",[e._v("时间戳")]),e._v("等")]),e._v(" "),t("li",[t("code",[e._v("search_after")]),e._v(" "),t("strong",[e._v("适用于深度分页+ 排序")]),e._v("，因为每一页的数据依赖于上一页最后一条数据，所以"),t("strong",[e._v("无法跳页请求")]),e._v("。")]),e._v(" "),t("li",[e._v("返回的始终是"),t("strong",[e._v("最新的数据")]),e._v("，在分页过程中数据的位置可能会有变更。这种分页方式更加符合 "),t("code",[e._v("moa")]),e._v(" 的业务场景")])]),e._v(" "),t("h4",{attrs:{id:"_5-番外篇-moa业务场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-番外篇-moa业务场景"}},[e._v("#")]),e._v(" 5. 番外篇：MOA业务场景")]),e._v(" "),t("ol",[t("li",[e._v("医疗大数据 看病更便捷")]),e._v(" "),t("li",[e._v("金融大数据 赚钱更给力")]),e._v(" "),t("li",[e._v("交通大数据 出行更方便")]),e._v(" "),t("li",[e._v("环保大数据 治污更给力")]),e._v(" "),t("li",[e._v("舆情大数据 网络管理利器")])]),e._v(" "),t("h3",{attrs:{id:"_17-filter缓存原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-filter缓存原理"}},[e._v("#")]),e._v(" 17. filter缓存原理")]),e._v(" "),t("h2",{attrs:{id:"es-查询相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-查询相关"}},[e._v("#")]),e._v(" ES 查询相关")]),e._v(" "),t("h3",{attrs:{id:"_1-前缀搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-前缀搜索"}},[e._v("#")]),e._v(" 1. 前缀搜索")]),e._v(" "),t("blockquote",[t("p",[e._v("以"),t("code",[e._v("xx")]),e._v("开头的搜索，不计算相关度评分，和"),t("code",[e._v("filter")]),e._v("比，没有"),t("code",[e._v("bitcache")]),e._v("("),t("code",[e._v("filter")]),e._v("的缓存，为了增加性能)。前缀搜索，尽量把前缀长度设置的更长，性能差。"),t("strong",[e._v("搜索原理：搜索的是倒排索引；搜索的关键字需要进行分词，分词后的每一个词都要进行全表扫描倒排索引进行匹配，引性能特别慢")]),e._v("。"),t("code",[e._v("index_prefixes")]),e._v(": 默认"),t("code",[e._v("min_chars")]),e._v("：2,  "),t("code",[e._v("max_chars")]),e._v("：5")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 前缀搜索\nPOST /my_index/_bulk\n{ "index": { "_id": "1"} }\n{ "text": "城管打电话喊商贩去摆摊摊" }\n{ "index": { "_id": "2"} }\n{ "text": "笑果文化回应商贩老农去摆摊" }\n{ "index": { "_id": "3"} }\n{ "text": "老农耗时17年种出椅子树" }\n{ "index": { "_id": "4"} }\n{ "text": "夫妻结婚30多年AA制,被城管抓" }\n{ "index": { "_id": "5"} }\n{ "text": "黑人见义勇为阻止抢劫反被铐住" }\n# 查不出结果的原因是：使用了es的默认分词器，对中文支持的不太友好，这个分词器会把中文一个字一个字的拆开\nGET my_index/_search\n{\n  "query": {\n    "prefix": {\n      "text": {\n        "value": "城管"\n      }\n    }\n  }\n}\n# 测试默认中文分词器\nGET /_analyze\n{\n  "text": "城管打电话喊商贩去摆摊摊",\n  "analyzer": "standard"\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 前缀搜索\nPOST /my_index/_bulk\n{ "index": { "_id": "1"} }\n{ "text": "my english" }\n{ "index": { "_id": "2"} }\n{ "text": "my english is good" }\n{ "index": { "_id": "3"} }\n{ "text": "my chinese is good" }\n{ "index": { "_id": "4"} }\n{ "text": "my japanese is nice" }\n{ "index": { "_id": "5"} }\n{ "text": "my disk is full" }\n# 英文默认分词器是好用的\nGET /_analyze\n{\n  "text": "my chinese is good",\n  "analyzer": "standard"\n}\n# 英文的前缀搜索是好用的\nGET my_index/_search\n{\n  "query": {\n    "prefix": {\n      "text": "ch"\n    }\n  }\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 设置默认的 启动索引 加快前缀搜索速度 index_prefixes: 默认min_chars:2, max_chars:5；es 会根据设置的参数建立倒排索引 \nPUT my_index\n{\n  "mappings": {\n    "properties": {\n      "text": {\n        "type": "text",\n        "index_prefixes": {\n          "min_chars":2,\n          "max_chars":4\n        }    \n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_2-通配符搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-通配符搜索"}},[e._v("#")]),e._v(" 2. 通配符搜索")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET my_index/_search\n{\n  "query": {\n    "wildcard": {\n      "text": {\n        "value": "eng?ish"\n      }\n    }\n  }\n}\n# 数据还是用的之前的 product 索引的数据\n# 匹配的是倒排索引\nGET product/_search\n{\n  "query": {\n    "wildcard": {\n      "name": {\n        "value": "xia?mi"\n      }\n    }\n  }\n}\n# 数据还是用的之前的 product 索引的数据\n# 匹配的是文档数据\nGET product/_search\n{\n  "query": {\n    "wildcard": {\n      "name.keyword": {\n        "value": "xiaomi*nfc*",\n        "boost": 1.0\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_3-正则搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-正则搜索"}},[e._v("#")]),e._v(" 3. 正则搜索")]),e._v(" "),t("p",[t("code",[e._v("regexp")]),e._v("查询的性能可以根据提供的正则表达式而有所不同。为了提高性能，应避免使用通配符模式，如"),t("code",[e._v(".*")]),e._v("或 "),t("code",[e._v(".*?+")]),e._v("未经前缀或后缀。flags参数值：")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("ALL")]),e._v("("),t("code",[e._v("Default")]),e._v(")：启用所有可选操作符。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("COMPLEMENT")]),e._v("：启用~操作符。可以使用"),t("code",[e._v("~")]),e._v("对下面最短的模式进行否定。例如：")]),e._v(" "),t("ul",[t("li",[e._v("a~bc  # matches 'adc' and 'aec' but not 'abc'")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("INTERVAL")]),e._v("：启用"),t("code",[e._v("<>")]),e._v("操作符。可以使用"),t("code",[e._v("<>")]),e._v("匹配数值范围。例如：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("foo<1-100>    # matches 'foo1', 'foo2' ... 'foo99', 'foo100'")])]),e._v(" "),t("li",[t("p",[e._v("foo<01-100>   # matches 'foo01', 'foo02' ... 'foo99', 'foo100'")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("INTERSECTION")]),e._v("：启用&操作符，它充当AND操作符。如果左边和右边的模式都匹配，则匹配成功。例如：")]),e._v(" "),t("ul",[t("li",[e._v("aaa.+&.+bbb  # matches 'aaabbb'")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("ANYSTRING")]),e._v("：启用@操作符。您可以使用@来匹配任何整个字符串。您可以将@操作符与&和~操作符组合起来，创建一个“everything except”逻辑。例如：")]),e._v(" "),t("ul",[t("li",[e._v("@&~(abc.+)  # matches everything except terms beginning with 'abc'")])])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 正则搜索\nGET product/_search\n{\n  "query": {\n    "regexp": {\n      "name": {\n        "value": "[\\\\s\\\\S]*nfc[\\\\s\\\\S]*",\n        "flags": "ALL",\n        "max_determinized_states": 10000,\n        "rewrite": "constant_score"\n      }\n    }\n  }\n}\n# 更新数据\nPUT /product/_doc/1\n{\n  "testid":"123456",\n  "text":"shouji zhong 2020-05-20 de zhandouji"\n}\nGET /_analyze\n{\n  "text": "shouji zhong 2020-05-20 de zhandouji",\n  "analyzer": "ik_max_word"\n}\n# 为什么没有结果，因为默认的标准分词器会把2020-05-20分成3个词，倒排索引中没有2020-05-20\nGET product/_search\n{\n  "query": {\n    "regexp": {\n      "text": {\n        "value": ".*2020-05-20.*",\n        "flags": "ALL"\n      }\n    }\n  }\n}\n# 这样就可以查出来结果，但是不建议使用这种方式，性能特别慢\nGET product/_search\n{\n  "query": {\n    "regexp": {\n      "text.keyword": {\n        "value": ".*2020-05-20.*",\n        "flags": "ALL"\n      }\n    }\n  }\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 创建索引时设置分词器\nPUT my_index\n{\n  "mappings": {\n    "properties": {\n      "text": {\n        "type": "text",\n        "analyzer": "ik_max_word",\n        "search_analyzer": "ik_max_word"\n      }\n    }\n  }\n}\n# 插入数据\nPUT /my_index/_doc/1\n{\n  "testid":"123456",\n  "text":"shouji zhong 2020-05-20 de zhandouji"\n}\n# 使用ik分词器进行查询方式二\nGET /my_index/_search\n{\n  "query": {\n    "regexp": {\n      "text": {\n        "value": ".*2020-05-20.*",\n        "flags": "ALL"\n      }\n    }\n  }\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# flags：INTERVAL方式查询\nGET my_index/_search\n{\n  "query": {\n    "regexp": {\n      "text": {\n        "value": ".*<1-4>.*",\n        "flags": "INTERVAL"\n      }\n    }\n  }\n}\nGET product/_search\n{\n  "query": {\n    "regexp": {\n      "desc": {\n        "value": ".*zh~eng.*",\n        "flags": "INTERVAL"\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_4-模糊搜索-fuzzy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-模糊搜索-fuzzy"}},[e._v("#")]),e._v(" 4. 模糊搜索：fuzzy")]),e._v(" "),t("h4",{attrs:{id:"模糊的几种情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模糊的几种情况"}},[e._v("#")]),e._v(" 模糊的几种情况")]),e._v(" "),t("ol",[t("li",[e._v("混淆字符 (box → fox)")]),e._v(" "),t("li",[e._v("缺少字符 (black → lack)")]),e._v(" "),t("li",[e._v("多出字符 (sic → sick)")]),e._v(" "),t("li",[e._v("颠倒次序 (act → cat)")])]),e._v(" "),t("h4",{attrs:{id:"fuzzy的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fuzzy的参数"}},[e._v("#")]),e._v(" fuzzy的参数")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("value")]),e._v("：要搜索的关键字")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("fuzziness")]),e._v("：（可选，字符串）最大误差  并非越大越好，召回率高 但是结果不准确")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("两段文本之间的"),t("code",[e._v("Damerau-Levenshtein")]),e._v("距离是使一个字符串与另一个字符串匹配所需的插入、删除、替换和调换的数量")])]),e._v(" "),t("li",[t("ol",[t("li",[e._v("距离公式："),t("code",[e._v("Levenshtein")]),e._v("是"),t("code",[e._v("lucene")]),e._v("的，es改进版："),t("code",[e._v("Damerau-Levenshtein")]),e._v("，")])]),e._v(" "),t("p",[t("code",[e._v("axe")]),e._v("=>"),t("code",[e._v("aex")]),e._v(" "),t("code",[e._v("Levenshtein")]),e._v("=2  "),t("code",[e._v("Damerau-Levenshtein")]),e._v("=1")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("max_expansions")]),e._v("：（可选，整数）匹配的最大词项数量。默认为50")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("prefix_length")]),e._v("：创建扩展时保留不变的开始字符数。默认为0")]),e._v(" "),t("p",[e._v("避免在"),t("code",[e._v("max_expansions")]),e._v("参数中使用较高的值，尤其是当"),t("code",[e._v("prefix_length")]),e._v("参数值为时0。"),t("code",[e._v("max_expansions")]),e._v("由于检查的变量数量过多，参数中的高值 可能导致性能不佳")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("transpositions")]),e._v("：（可选，布尔值）指示编辑是否包括两个相邻字符的变位（ab→ba）。默认为"),t("code",[e._v("true")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("rewrite")]),e._v("：（可选，字符串）用于重写查询的方法："),t("a",{attrs:{href:"#performance-considerations"}},[e._v("https://www.elastic.co/cn/blog/found-fuzzy-search#performance-considerations")])])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 查询语句\nGET /my_index/_search \n{\n  "query": {\n    "fuzzy": {\n      "text": {\n        "value": "shouai",\n        "fuzziness": 2\n      }\n    }\n  }\n}\n# shouai容错的搜索结果\n{\n\t"_source" : {\n          "testid" : "123456",\n          "text" : "shouji zhong 2020-05-20 de zhandouji"\n        }\n}\nGET /my_index/_search \n{\n  "query": {\n    "fuzzy": {\n      "text": {\n        "value": "shouai",\n        "fuzziness": "AUTO"\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_5-match-phrase-prefix讲解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-match-phrase-prefix讲解"}},[e._v("#")]),e._v(" 5. match_phrase_prefix讲解")]),e._v(" "),t("p",[t("code",[e._v("match_phrase_prefix")]),e._v("与"),t("code",[e._v("match_phrase")]),e._v("相同，但是它多了一个特性，就是它允许在文本的最后一个词项"),t("code",[e._v("(term)")]),e._v("上的前缀匹配；如果 是一个单词，比如"),t("code",[e._v("a")]),e._v("，它会匹配文档字段所有以"),t("code",[e._v("a")]),e._v("开头的文档，如果是一个短语，比如 "),t("code",[e._v("this is ma")]),e._v("，他会先在倒排索引中做以"),t("code",[e._v("ma")]),e._v("做前缀搜索，然后在匹配到的"),t("code",[e._v("doc")]),e._v("中做"),t("code",[e._v("match_phrase")]),e._v("查询，(网上有的说是先"),t("code",[e._v("match_phrase")]),e._v("，然后再进行前缀搜索, 是不对的)")]),e._v(" "),t("h4",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("analyzer")]),e._v("指定何种分析器来对该短语进行分词处理")]),e._v(" "),t("li",[t("code",[e._v("max_expansions")]),e._v("限制匹配的最大词项")]),e._v(" "),t("li",[t("code",[e._v("boost")]),e._v("用于设置该查询的权重")]),e._v(" "),t("li",[t("code",[e._v("slop")]),e._v("允许短语间的词项"),t("code",[e._v("(term)")]),e._v("间隔")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("slop")]),e._v("参数告诉"),t("code",[e._v("match_phrase")]),e._v("查询词条相隔多远时仍然能将文档视为匹配 什么是相隔多远？ 意思是说为了让查询和文档匹配你需要移动词条多少次？")])]),e._v(" "),t("h2",{attrs:{id:"es-查询总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-查询总结"}},[e._v("#")]),e._v(" ES 查询总结")]),e._v(" "),t("h3",{attrs:{id:"match、term、match-phrase、query-string的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match、term、match-phrase、query-string的区别"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://www.cnblogs.com/chenmz1995/p/10199147.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("match、term、match_phrase、query_string的区别"),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"准备数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备数据"}},[e._v("#")]),e._v(" 准备数据")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 插入数据\nPUT /product/_doc/1\n{\n    "name" : "xiaomi phone",\n    "desc" :  "shouji zhong de zhandouji",\n    "price" :  3999,\n    "tags": [ "xingjiabi", "fashao", "buka" ]\n}\nPUT /product/_doc/2\n{\n    "name" : "xiaomi nfc phone",\n    "desc" :  "zhichi quangongneng nfc,shouji zhong de jianjiji",\n    "price" :  4999,\n    "tags": [ "xingjiabi", "fashao", "gongjiaoka" ]\n}\nPUT /product/_doc/3\n{\n    "name" : "nfc phone",\n    "desc" :  "shouji zhong de hongzhaji",\n    "price" :  2999,\n    "tags": [ "xingjiabi", "fashao", "menjinka" ]\n}\nPUT /product/_doc/4\n{\n    "name" : "xiaomi erji",\n    "desc" :  "erji zhong de huangmenji",\n    "price" :  999,\n    "tags": [ "low", "bufangshui", "yinzhicha" ]\n}\nPUT /product/_doc/5\n{\n    "name" : "hongmi erji",\n    "desc" :  "erji zhong de kendeji",\n    "price" :  399,\n    "tags": [ "lowbee", "xuhangduan", "zhiliangx" ]\n}\n')])])]),t("h4",{attrs:{id:"match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match"}},[e._v("#")]),e._v(" match")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 查询所有\nGET /product/_search\n{\n  "query":{\n    "match_all": {}\n  }\n}\n# match分词，text也分词，只要match的分词结果和text的分词结果有相同的就匹配\n# nfc phone会被分成两个词，分别匹配倒排索引\nGET /product/_search\n{\n  "query": {\n    "match": {\n      "name": "nfc phone"\n    }\n  }\n}\n# match会被分词，而keyword不会被分词，match的需要跟keyword的完全匹配可以\nGET /product/_search\n{\n  "query": {\n    "match": {\n      "name.keyword": "xiaomi nfc phone"\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"term"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#term"}},[e._v("#")]),e._v(" term")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# term 查询关键字不会被分词，倒排所用中没有\'nfc phone\'这个词，所以查询不到结果\nGET /product/_search\n{\n  "query": {\n    "term": {\n      "name": "nfc phone"\n    }\n  }\n}\n# text字段会分词，而term 查询关键字不会被分词，所以term查询的条件必须是text字段分词后的某一个才可以\nGET /product/_search\n{\n  "query": {\n    "term": {\n      "name": "nfc"\n    }\n  }\n}\n# term 查询关键字不会被分词，而keyword字段也不分词。需要完全匹配才可\nGET /product/_search\n{\n  "query": {\n    "term": {\n      "name.keyword": "nfc phone"\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"match-phrase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#match-phrase"}},[e._v("#")]),e._v(" match_phrase")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# match_phrase是分词的，text也是分词的。match_phrase的分词结果必须在text字段分词中都包含（且不支持前缀搜索），而且顺序必须相同，而且必须都是连续的\nGET /product/_search\n{\n  "query": {\n    "match_phrase": {\n      "desc": "shouji zhong"\n    }\n  }\n}\n# match_phrase是分词的，而keyword字段不分词。需要完全匹配才可\nGET /product/_search\n{\n  "query": {\n    "match_phrase": {\n      "desc.keyword": "shouji zhong"\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"query-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#query-string"}},[e._v("#")]),e._v(" query_string")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# query_string是分词的，text也是分词的。分词之后，每一个词可支持前缀搜索，故不要求顺序\nGET /product/_search\n{\n  "query": {\n    "query_string": {\n      "query": "zhong shouji",\n      "fields": ["desc"]\n    }\n  }\n}\n# query_string是分词的，而keyword字段不分词。需要完全匹配才可\nGET /product/_search\n{\n  "query": {\n    "query_string": {\n      "query": "shouji zhong de zhandouji",\n      "fields": ["desc.keyword"]\n    }\n  }\n}\n')])])]),t("h2",{attrs:{id:"mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mapping"}},[e._v("#")]),e._v(" Mapping")]),e._v(" "),t("h3",{attrs:{id:"_1-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[e._v("#")]),e._v(" 1. 概念")]),e._v(" "),t("p",[t("code",[e._v("mapping")]),e._v("就是"),t("code",[e._v("ES")]),e._v("数据字段"),t("code",[e._v("field")]),e._v("的"),t("code",[e._v("type")]),e._v("元数据，"),t("code",[e._v("ES")]),e._v("在创建索引的时候，"),t("code",[e._v("dynamic mapping")]),e._v("会自动为不同的数据指定相应"),t("code",[e._v("mapping")]),e._v("，"),t("code",[e._v("mapping")]),e._v("中包含了字段的类型、搜索方式（"),t("code",[e._v("exact value")]),e._v("或者"),t("code",[e._v("full text")]),e._v("）、分词器等。")]),e._v(" "),t("h3",{attrs:{id:"_2-查看mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查看mapping"}},[e._v("#")]),e._v(" 2. 查看mapping")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v("GET /product/_mappings\n")])])]),t("h3",{attrs:{id:"_3-动态mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-动态mapping"}},[e._v("#")]),e._v(" 3. 动态mapping")]),e._v(" "),t("ol",[t("li",[e._v("Elasticsearch：text / keyword")]),e._v(" "),t("li",[e._v("123456             =>\tlong\t\t\t？为什么不是"),t("code",[e._v("integer")])]),e._v(" "),t("li",[e._v("123.123            =>\tdouble        实际是"),t("code",[e._v("float")]),e._v("类型")]),e._v(" "),t("li",[e._v("true false          =>\tboolean")]),e._v(" "),t("li",[e._v("2020-05-20       =>\tdate")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{color:"red"}},[e._v("为啥"),t("code",[e._v("123456")]),e._v("是"),t("code",[e._v("long")]),e._v("类型而不是"),t("code",[e._v("integer")]),e._v("？因为"),t("code",[e._v("es")]),e._v("的"),t("code",[e._v("mapping_type")]),e._v("是由"),t("code",[e._v("JSON")]),e._v("分析器检测数据类型，而"),t("code",[e._v("Json")]),e._v("没有隐式类型转换（"),t("code",[e._v("integer")]),e._v("=>"),t("code",[e._v("long")]),e._v(" or "),t("code",[e._v("float")]),e._v("=> "),t("code",[e._v("double")]),e._v("），所以"),t("code",[e._v("dynamic mapping")]),e._v("会选择一个比较宽的数据类型。")])],1)]),e._v(" "),t("h3",{attrs:{id:"_4-搜索方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-搜索方式"}},[e._v("#")]),e._v(" 4. 搜索方式")]),e._v(" "),t("ol",[t("li",[e._v("exact value 精确匹配：在倒排索引过程中，分词器会将"),t("code",[e._v("field")]),e._v("作为一个整体创建到索引中")]),e._v(" "),t("li",[e._v("full text全文检索： 分词、近义词同义词、混淆词、大小写、词性、过滤、时态转换等")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 搜索所有字段包含de的doc\nGET /product/_search?q=de\n# 搜索name字段包含de的doc\nGET /product/_search?q=name:de\n# name.keyword 不会被分词，有点儿类似 match_phrase 短语搜索，eq文档doc的属性\nGET /product/_search\n{\n  "query": {\n    "match": {\n      "name.keyword": "xiaomi phone"\n    }\n  }\n}\nGET /product/_search\n{\n  "query": {\n    "match_phrase": {\n      "name": "xiaomi phone"\n    }\n  }\n}\n# 全文检索可能会搜索出多条结果 eq倒排索引\nGET /product/_search\n{\n  "query": {\n    "match": {\n      "name": "xiaomi phone"\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_5-es数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-es数据类型"}},[e._v("#")]),e._v(" 5. ES数据类型")]),e._v(" "),t("h4",{attrs:{id:"_1-核心类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-核心类型"}},[e._v("#")]),e._v(" 1. 核心类型")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("数字类型")]),e._v(" "),t("ul",[t("li",[e._v("long")]),e._v(" "),t("li",[e._v("integer")]),e._v(" "),t("li",[e._v("short")]),e._v(" "),t("li",[e._v("byte")]),e._v(" "),t("li",[e._v("double")]),e._v(" "),t("li",[e._v("float")]),e._v(" "),t("li",[e._v("half_float")]),e._v(" "),t("li",[e._v("scaled_float")]),e._v(" "),t("li",[e._v("在满足需求的情况下，尽可能选择范围小的数据类型")])])]),e._v(" "),t("li",[t("p",[e._v("字符串")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("keyword：适用于索引结构化的字段，可以用于过滤、排序、聚合。"),t("code",[e._v("keyword")]),e._v("类型的字段只能通过精确值搜索列。ID应该用"),t("code",[e._v("keyword")])])]),e._v(" "),t("li",[t("p",[e._v("text：当一个字段是要被全文搜索的，比如"),t("code",[e._v("Email")]),e._v("内容、产品描述，这些字段应该使用"),t("code",[e._v("text")]),e._v("类型。设置"),t("code",[e._v("text")]),e._v("类型以后，字段内容会被分析，在生成倒排索引之前，字符串会被分析器分成一个一个词项。"),t("code",[e._v("text")]),e._v("类型的字段不用于排序，很少用于聚合。")]),e._v(" "),t("blockquote",[t("p",[e._v("解释一下为啥不会为"),t("code",[e._v("text")]),e._v("创建索引：字段数据会占用大量堆空间，尤其是在加载高基数"),t("code",[e._v("text")]),e._v("字段时。字段数据一旦加载到堆中，就在该段的生命周期内保持在那里。同样，加载字段数据是一个昂贵的过程，可能导致用户遇到延迟问题。这就是默认情况下禁用字段数据的原因。")]),e._v(" "),t("p",[e._v("有时，在同一字段中同时具有全文本"),t("code",[e._v("text")]),e._v("和关键字"),t("code",[e._v("keyword")]),e._v("版本会很有用：一个用于全文本搜索，另一个用于聚合和排序")])])]),e._v(" "),t("li",[t("p",[e._v("date（时间类型）：exact value")])]),e._v(" "),t("li",[t("p",[e._v("boolean（布尔类型）")])]),e._v(" "),t("li",[t("p",[e._v("binary（二进制）：binary")])]),e._v(" "),t("li",[t("p",[e._v("range（区间类型）：integer_range、float_range、long_range、double_range、date_range")])])])])]),e._v(" "),t("h4",{attrs:{id:"_2-复杂类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-复杂类型"}},[e._v("#")]),e._v(" 2. 复杂类型")]),e._v(" "),t("ol",[t("li",[e._v("Object：用于单个JSON对象")]),e._v(" "),t("li",[e._v("Nested：用于JSON对象数组")])]),e._v(" "),t("h4",{attrs:{id:"_3-地理位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-地理位置"}},[e._v("#")]),e._v(" 3. 地理位置")]),e._v(" "),t("ol",[t("li",[e._v("Geo-point：纬度 / 经度积分")]),e._v(" "),t("li",[e._v("Geo-shape：用于多边形等复杂形状")])]),e._v(" "),t("h4",{attrs:{id:"_4-特有类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-特有类型"}},[e._v("#")]),e._v(" 4. 特有类型")]),e._v(" "),t("ol",[t("li",[e._v("IP地址：ip 用于IPv4和IPv6地址")]),e._v(" "),t("li",[e._v("Completion：提供自动完成建议")]),e._v(" "),t("li",[e._v("Tocken_count：计算字符串中令牌的数量")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/plugins/7.7/mapper-murmur3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Murmur3"),t("OutboundLink")],1),e._v("：在索引时计算值的哈希并将其存储在索引中")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/plugins/7.7/mapper-annotated-text.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Annotated-text"),t("OutboundLink")],1),e._v("：索引包含特殊标记的文本（通常用于标识命名实体）")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/percolator.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Percolator"),t("OutboundLink")],1),e._v("：接受来自query-dsl的查询")]),e._v(" "),t("li",[e._v("Join：为同一索引内的文档定义父/子关系")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/rank-features.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rank features"),t("OutboundLink")],1),e._v("：记录数字功能以提高查询时的点击率。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/dense-vector.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dense vector"),t("OutboundLink")],1),e._v("：记录浮点值的密集向量。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/sparse-vector.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sparse vector"),t("OutboundLink")],1),e._v("：记录浮点值的稀疏向量。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-as-you-type.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Search-as-you-type"),t("OutboundLink")],1),e._v("：针对查询优化的文本字段，以实现按需输入的完成")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/alias.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alias"),t("OutboundLink")],1),e._v("：为现有字段定义别名。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/flattened.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flattened"),t("OutboundLink")],1),e._v("：允许将整个JSON对象索引为单个字段。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/shape.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Shape"),t("OutboundLink")],1),e._v("：shape 对于任意笛卡尔几何。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/histogram.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Histogram"),t("OutboundLink")],1),e._v("：histogram 用于百分位数聚合的预聚合数值。")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/constant-keyword.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Constant keyword"),t("OutboundLink")],1),e._v("：keyword当所有文档都具有相同值时的情况的 专业化。")])]),e._v(" "),t("h4",{attrs:{id:"_5-array-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-array-数组"}},[e._v("#")]),e._v(" 5. Array（数组）")]),e._v(" "),t("p",[e._v("在Elasticsearch中，数组不需要专用的字段数据类型。默认情况下，任何字段都可以包含零个或多个值，但是，数组中的所有值都必须具有相同的数据类型。")]),e._v(" "),t("h4",{attrs:{id:"_6-es7新增"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-es7新增"}},[e._v("#")]),e._v(" 6. ES7新增")]),e._v(" "),t("ol",[t("li",[e._v("Date_nanos：date plus 纳秒")]),e._v(" "),t("li",[e._v("Features：")]),e._v(" "),t("li",[e._v("Vector：as")])]),e._v(" "),t("h3",{attrs:{id:"_6-手工创建mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-手工创建mapping"}},[e._v("#")]),e._v(" 6. 手工创建Mapping")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 格式\nPUT /{indexName}\n{\n  "mappings": {\n    "properties": {\n        "field": {\n          "mapping_parameter": "parameter_value"\n        }\n      }\n  }\n}\n# 手工创建 mappings\nPUT /product3\n{\n  "mappings": {\n    "properties": {\n      "date": {\n        "type": "text"\n      },\n      "desc": {\n        "type": "text",\n        "analyzer": "english"\n      },\n      "name": {\n        "type": "text",\n        "index": "false"\n      },\n      "price": {\n        "type": "long"\n      },\n      "tags": {\n        "type": "text",\n        "index": "true"\n      },\n      "parts": {\n        "type": "object"\n      },\n      "partlist": {\n        "type": "nested"\n      }\n    }\n  }\n}\n# 查看 mapping\nGET /product3/_mapping\n# 插入数据\nPUT /product3/_doc/1\n{\n  "name": "xiaomi phone",\n  "desc": "shouji zhong de zhandouji",\n  "count": 123456,\n  "price": 3999,\n  "date": "2020-05-20",\n  "isdel": false,\n  "tags": [\n    "xingjiabi",\n    "fashao",\n    "buka"\n  ],\n  "parts": {\n    "name": "adapter",\n    "desc": "5V 2A"\n  },\n  "partlist": [\n    {\n      "name": "adapter",\n      "desc": "5V 2A"\n    },\n    {\n      "name": "USB-C",\n      "desc": "5V 2A 1.5m"\n    },\n    {\n      "name": "erji",\n      "desc": "boom"\n    }\n  ]\n}\n# 查看数据\nGET /product3/_search\n{\n  "query": {\n    "match_all": {}\n  }\n}\n')])])]),t("h3",{attrs:{id:"_7-mapping-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-mapping-parameters"}},[e._v("#")]),e._v(" 7. Mapping parameters")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("index")]),e._v("：是否对创建对当前字段创建索引，默认true，如果不创建索引，该字段不会通过索引被搜索到，但是仍然会在"),t("code",[e._v("source")]),e._v("元数据中展示")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("analyzer")]),e._v("：指定分析器（character filter、tokenizer、Token filters）。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("boost")]),e._v("：对当前字段相关度的评分权重，默认1")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("coerce")]),e._v("：是否允许强制类型转换  true “1”=> 1  false “1”=< 1")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("copy_to")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"field": {\n   "type": "text",\n   "copy_to": "other_field_name" \n}\n')])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("doc_values")]),e._v("：为了提升排序和聚合效率，默认true，如果确定不需要对字段进行排序或聚合，也不需要通过脚本访问字段值，则可以禁用"),t("code",[e._v("doc")]),e._v("值以节省磁盘空间（不支持"),t("code",[e._v("text")]),e._v("和"),t("code",[e._v("annotated_text")]),e._v("）")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("dynamic")]),e._v("：控制是否可以动态添加新字段")]),e._v(" "),t("ul",[t("li",[e._v("true 新检测到的字段将添加到映射中。（默认）")]),e._v(" "),t("li",[e._v("false 新检测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但仍会出现在_source返回的匹配项中。这些字段不会添加到映射中，必须显式添加新字段。")]),e._v(" "),t("li",[e._v("strict 如果检测到新字段，则会引发异常并拒绝文档。必须将新字段显式添加到映射中")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("eager_global_ordinals")]),e._v("：用于聚合的字段上，优化聚合性能。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Frozen indices")]),e._v("（冻结索引）：有些索引使用率很高，会被保存在内存中，有些使用率特别低，宁愿在使用的时候重新创建，在使用完毕后丢弃数据，"),t("code",[e._v("Frozen indices")]),e._v("的数据命中频率小，不适用于高搜索负载，数据不会被保存在内存中，堆空间占用比普通索引少得多，"),t("code",[e._v("Frozen indices")]),e._v("是只读的，请求可能是秒级或者分钟级。"),t("code",[e._v("eager_global_ordinals")]),e._v("不适用于"),t("code",[e._v("Frozen indices")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("enable")]),e._v("：是否创建倒排索引，可以对字段操作，也可以对索引操作，如果不创建索引，仍然可以检索并在"),t("code",[e._v("_source")]),e._v("元数据中展示，谨慎使用，该状态无法修改。")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('PUT my_index \n{\n  "mappings": {\n    "enabled": false \n  }\n}\nPUT my_index\n{\n  "mappings": {\n    "properties": {\n      "session_data": {\n        "type": "object",\n        "enabled": false\n      }\n    }\n  }\n}\n')])])]),t("blockquote",[t("p",[t("font",{attrs:{color:"red"}},[t("strong",[e._v("注意：enable只能在最顶层，并且type为object的时候设置才生效。")])])],1)])]),e._v(" "),t("li",[t("p",[t("code",[e._v("fielddata")]),e._v("：查询时"),t("code",[e._v("内存")]),e._v("数据结构，在首次用当前字段聚合、排序或者在脚本中使用时，需要字段为"),t("code",[e._v("fielddata")]),e._v("数据结构，并且创建正排索引"),t("code",[e._v("doc_values")]),e._v("并保存到"),t("code",[e._v("JVM")]),e._v("的堆中，一定要慎用。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("fields")]),e._v("：给"),t("code",[e._v("field")]),e._v("创建多字段，用于不同目的（全文检索或者聚合分析排序）")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("format")]),e._v("：格式化")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"date": {\n      "type":   "date",\n      "format": "yyyy-MM-dd"\n }\n')])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("ignore_above")]),e._v("：超过长度将被忽略")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("ignore_malformed")]),e._v("：忽略类型错误")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('PUT my_index{\n  "mappings": {\n    "properties": {\n      "number_one": {\n        "type": "integer",\n        "ignore_malformed": true\n      },\n      "number_two": {\n        "type": "integer"\n      }\n    }\n  }\n}\nPUT my_index/_doc/1{\n  "text":       "Some text value",\n  "number_one": "foo"    //虽然有异常 但是不抛出\n}\nPUT my_index/_doc/2{\n  "text":       "Some text value",\n  "number_two": "foo"   //数据格式不对\t\n}\n')])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("index_options")]),e._v("：控制将哪些信息添加到反向索引中以进行搜索和突出显示。仅用于"),t("code",[e._v("text")]),e._v("字段")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("Index_phrases")]),e._v("：提升"),t("code",[e._v("exact_value")]),e._v("查询速度，但是要消耗更多磁盘空间")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("Index_prefixes")]),e._v("：前缀搜索")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("min_chars")]),e._v("：前缀最小长度，>0，默认2（包含）")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("max_chars")]),e._v("：前缀最大长度，<20，默认5（包含）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"index_prefixes": {\n\t"min_chars" : 1,\n\t"max_chars" : 10\n}\t\n')])])])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("meta")]),e._v("：附加元数据")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("normalizer")]),e._v("：")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("norms")]),e._v("：是否禁用评分（在"),t("code",[e._v("filter")]),e._v("和"),t("code",[e._v("聚合字段")]),e._v("上应该禁用）")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("null_value")]),e._v('：为null值设置默认值（"null_value": "NULL"）')])]),e._v(" "),t("li",[t("p",[t("code",[e._v("position_increment_gap")]),e._v("：")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("proterties")]),e._v("：除了"),t("code",[e._v("mapping")]),e._v("还可用于"),t("code",[e._v("object")]),e._v("的属性设置")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("search_analyzer")]),e._v("：设置单独的查询时分析器")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('PUT my_index{\n  "settings": {\n    "analysis": {\n      "filter": {\n        "autocomplete_filter": {\n          "type": "edge_ngram",\n          "min_gram": 1,\n          "max_gram": 20\n        }\n      },\n      "analyzer": {\n        "autocomplete": { \n          "type": "custom",\n          "tokenizer": "standard",\n          "filter": [\n            "lowercase",\n            "autocomplete_filter"\n          ]\n        }\n      }\n    }\n  },\n  "mappings": {\n    "properties": {\n      "text": {\n        "type": "text",\n        "analyzer": "autocomplete", \n        "search_analyzer": "standard" \n      }\n    }\n  }\n}\nPUT my_index/_doc/1{\n  "text": "Quick Brown Fox" \n}\nGET my_index/_search{\n  "query": {\n    "match": {\n      "text": {\n        "query": "Quick Br", \n        "operator": "and"\n      }\n    }\n  }\n}\n')])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("similarity")]),e._v("：为字段设置相关度算法，支持"),t("code",[e._v("BM25")]),e._v("、"),t("code",[e._v("claassic（TF-IDF）")]),e._v("、"),t("code",[e._v("boolean")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("store")]),e._v("：设置字段是否仅查询")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("term_vector")]),e._v("：")])])]),e._v(" "),t("h2",{attrs:{id:"聚合查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合查询"}},[e._v("#")]),e._v(" 聚合查询")]),e._v(" "),t("h3",{attrs:{id:"_1-bucket-和-metirc-group-by"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-bucket-和-metirc-group-by"}},[e._v("#")]),e._v(" 1. bucket 和 metirc == group by")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("bucket（item）")]),e._v(" "),t("th",[e._v("metirc（count）")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("北京")]),e._v(" "),t("td",[e._v("100")])]),e._v(" "),t("tr",[t("td",[e._v("天津")]),e._v(" "),t("td",[e._v("99")])]),e._v(" "),t("tr",[t("td",[e._v("河北")]),e._v(" "),t("td",[e._v("98")])])])]),e._v(" "),t("h3",{attrs:{id:"_2-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法"}},[e._v("#")]),e._v(" 2. 语法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"aggs": {\n\tcode...\n}\n')])])]),t("h3",{attrs:{id:"_3-以tag维度每个产品的数量-即每个标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-以tag维度每个产品的数量-即每个标签"}},[e._v("#")]),e._v(" 3. 以"),t("code",[e._v("tag")]),e._v("维度每个产品的数量，即每个标签")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "aggs": {\n    "tag_agg_group": {\n      "terms": {\n        "field": "tags.keyword"\n      }\n    }\n  },\n  # 不加这个会把原始的doc也查出来\n  "size": 0\n}\n')])])]),t("h3",{attrs:{id:"_4-在-3-的基础上增加-价格大于1999的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-在-3-的基础上增加-价格大于1999的数据"}},[e._v("#")]),e._v(" 4. 在 3 的基础上增加：价格大于1999的数据")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "query": {\n    "bool": {\n      "filter": [\n        {\n          "range": {"price": {"gt": 1999}}\n        }\n      ]\n    }\n  },\n  "aggs": {\n    "tag_agg_group": {\n      "terms": {\n        "field": "tags.keyword"\n      }\n    }\n  },\n  # 不加这个会把原始的doc也查出来\n  "size": 0\n}\n')])])]),t("h3",{attrs:{id:"_5-价格大于1999的每个tag产品的平均价格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-价格大于1999的每个tag产品的平均价格"}},[e._v("#")]),e._v(" 5. 价格大于1999的每个tag产品的平均价格")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "aggs": {\n    "tag_agg_avg": {\n      "terms": {\n        "field": "tags.keyword",\n        "order": {\n          "avg_price": "desc"\n        }\n      },\n      "aggs": {\n        "avg_price": {\n          "avg": {\n            "field": "price"\n          }\n        }\n      }\n    }\n  },\n  # 不加这个会把原始的doc也查出来\n  "size":0\n}\n')])])]),t("h3",{attrs:{id:"_6-自定义聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-自定义聚合"}},[e._v("#")]),e._v(" 6. 自定义聚合")]),e._v(" "),t("p",[t("strong",[e._v("按照千元机：1000以下  中端机：2000-3000 高端机：3000以上分组聚合，分别计算数量")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /product/_search\n{\n  "aggs": {\n    "tag_agg_group": {\n      "range": {\n        "field": "price",\n        "ranges": [\n          {\n            "from": 100,\n            "to": 1000\n          },\n          {\n            "from": 1000,\n            "to": 3000\n          },\n          {\n            "from": 3000\n          }\n        ]\n      },\n      "aggs": {\n        "price_agg": {\n          "avg": {\n            "field": "price"\n          }\n        }\n      }\n    }\n  },\n  # 不加这个会把原始的doc也查出来\n  "size": 0\n}\n')])])]),t("h3",{attrs:{id:"_7-mget-批量查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-mget-批量查询"}},[e._v("#")]),e._v(" 7. mget：批量查询")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v("# 语法\nGET /_mget\nGET /<index>/_mget\n")])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# demo\n# 批量查询不同索引的结果\nGET /_mget\n{\n  "docs": [\n    {\n      "_index": "product",\n      "_id": 2\n    },\n    {\n      "_index": "product",\n      "_id": 3\n    }\n  ]\n}\n# 批量查询同一个索引的不同ID\n#封装,把索引名(product提取出来)\nGET /product/_mget\n{\n  "docs": [\n    {\n      "_id": 2\n    },\n    {\n      "_id": 3\n    }\n  ]\n}\nGET /product/_mget\n{\n  "ids":[2,3]\n}\n#include包含哪些字段  exclude排除哪些字段\nGET /product/_mget\n{\n  "docs": [\n    {\n      "_id": 2,\n      "_source": false\n    },\n    {\n      "_id": 3,\n      "_source": [\n        "name",\n        "price"\n      ]\n    },\n    {\n      "_id": 4,\n      "_source": {\n        "include": [\n          "name"\n        ],\n        "exclude":[\n          "price"\n          ]\n      }\n    }\n  ]\n}\n')])])]),t("h3",{attrs:{id:"_8-bulk-批量增删改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-bulk-批量增删改"}},[e._v("#")]),e._v(" 8. bulk：批量增删改")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 语法格式\nPOST /_bulk\nPOST /<index>/_bulk\n{"action": {"metadata"}}\n{"data"}\n')])])]),t("ol",[t("li",[t("strong",[e._v("Operate：")])]),e._v(" "),t("li",[t("code",[e._v("create")]),e._v("：如果"),t("code",[e._v("id")]),e._v("已经存在，则报错；不存在，则插入")]),e._v(" "),t("li",[t("code",[e._v("delete")]),e._v("：删除（lazy delete原理）")]),e._v(" "),t("li",[t("code",[e._v("index")]),e._v("：可以是创建，也可以是全量替换")]),e._v(" "),t("li",[t("code",[e._v("update")]),e._v("：执行"),t("code",[e._v("partial update")]),e._v("（全量替换，部分替换）")]),e._v(" "),t("li",[e._v("这么做的好处是为了节省内存，普通的插入方式会在"),t("code",[e._v("es")]),e._v("内部序列化反序列化成一个个对象，采用"),t("code",[e._v("bulk")]),e._v("方式不需要序列化反序列化对象，从而节省了内存的开销")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('#手动指定id和自动生成（正常方式）\nPUT /test_index/_doc/1/\n{\n  "field":"test"\n}\nPUT /test_index/_doc/1/_create\n{\n  "field":"test"\n}\nPUT /test_index/_create/1/\n{\n  "field":"test"\n}\n#自动生产id(guid)\nPOST /test_index/_doc\n{\n  "field":"test"\n}\n# bulk方式操作数据\nPOST /_bulk\n{"create":{"_index":"product2", "_id":"1", "retry_on_conflict":"3"}}\n{"name":"_buld create1"}\n{"create":{"_index":"product2", "_id":"12"}}\n{"name":"_buld create12"}\n{"delete":{"_index":"product2", "_id":"11"}}\n{"update":{"_index":"product2", "_id":"12"}}\n{"doc":{"name":"_buld create22"}}\n{"index":{"_index":"product2", "_id":"12"}}\n{"doc":{"name":"_buld create2222222"}}\n{"index":{"_index":"product2", "_id":"11"}}\n{"doc":{"name":"_buld create111"}}\n# retry_on_conflict：冲突重试 \n# index 存在则全量替换，不存在则创建\n# POST /_bulk?filter_path=items.*.error  只显示失败的结果\n')])])]),t("h3",{attrs:{id:"_9-es-并发冲突问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-es-并发冲突问题"}},[e._v("#")]),e._v(" 9. ES 并发冲突问题")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("悲观锁：各种情况，都加锁，读写锁、行级锁、表级锁。使用简单，但是并发能力很低")])]),e._v(" "),t("li",[t("p",[e._v("乐观锁：并发能力高，操作麻烦，每次"),t("code",[e._v("no-query")]),e._v("操作都需要比对"),t("code",[e._v("version")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("?version=2&&version_type=external\n# `if_seq_no` and `if_primary_term`\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"es底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es底层原理"}},[e._v("#")]),e._v(" ES底层原理")]),e._v(" "),t("h3",{attrs:{id:"图解正排索引和倒排索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图解正排索引和倒排索引"}},[e._v("#")]),e._v(" 图解正排索引和倒排索引")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E8%A7%A3-%E6%AD%A3%E6%8E%92%E7%B4%A2%E5%BC%95VS%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95.jpg",alt:"图解-正排索引VS倒排索引"}})]),e._v(" "),t("blockquote",[t("p",[e._v("如果使用倒排索引做聚合操作，会对倒排索引进行多次全表扫描，从而降低了查询效率")])]),e._v(" "),t("h3",{attrs:{id:"正排索引doc-values和倒排索引的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正排索引doc-values和倒排索引的区别"}},[e._v("#")]),e._v(" 正排索引"),t("code",[e._v("doc_values")]),e._v("和倒排索引的区别")]),e._v(" "),t("ol",[t("li",[e._v("倒排索引的优势在于查找包含某个项的文档，即用于搜索查询；相反正排索引的优势是确定哪些项是否存在单个文档里")]),e._v(" "),t("li",[e._v("倒排索引和正排索引均是在"),t("code",[e._v("index-time")]),e._v("时创建，保存再Lucene文件中（序列化到磁盘）")]),e._v(" "),t("li",[t("code",[e._v("doc_values")]),e._v("使用非"),t("code",[e._v("JVM")]),e._v("内存，gc友好")]),e._v(" "),t("li",[e._v("不分词的"),t("code",[e._v("field")]),e._v("会在"),t("code",[e._v("index-time")]),e._v("时生成正排索引，聚合时直接使用正排索引，而分词的"),t("code",[e._v("field")]),e._v("在创建索引时是没有正排索引的，如果没有创建"),t("code",[e._v("doc_values")]),e._v("的字段需要做聚合查询时，"),t("code",[e._v("name")]),e._v("需要将"),t("code",[e._v("fielddata")]),e._v("打开，设置为true。此时会在执行查询的时候，动态在"),t("code",[e._v("JVM")]),e._v("的堆内存空间创建正排索引。")])]),e._v(" "),t("h3",{attrs:{id:"正排索引doc-values和fielddata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正排索引doc-values和fielddata"}},[e._v("#")]),e._v(" 正排索引"),t("code",[e._v("doc_values")]),e._v("和"),t("code",[e._v("fielddata")])]),e._v(" "),t("ol",[t("li",[e._v("与"),t("code",[e._v("doc_value")]),e._v("不同，当没有"),t("code",[e._v("doc_value")]),e._v("的字段需要聚合时，需要打开"),t("code",[e._v("fielddata")]),e._v("，然后临时在内存中建立正排索引，"),t("code",[e._v("fielddata")]),e._v("的构建和管理发生在"),t("code",[e._v("JVM Heap")]),e._v("中")]),e._v(" "),t("li",[t("code",[e._v("fielddata")]),e._v("默认是不器用的，因为"),t("code",[e._v("text")]),e._v("的字段比较长，一般只做关键字分词和搜索，很少拿他来进行全文匹配、聚合、排序等操作")]),e._v(" "),t("li",[t("code",[e._v("ES")]),e._v("采用了"),t("code",[e._v("circuit breaker")]),e._v("熔断机制避免"),t("code",[e._v("fielddata")]),e._v("一次性超过物理内存大小而导致内存溢出，如果触发熔断，查询会被终止并返回异常")]),e._v(" "),t("li",[t("code",[e._v("fielddata")]),e._v("使用的是"),t("code",[e._v("JVM")]),e._v("内存，"),t("code",[e._v("doc_value")]),e._v("在内存不足时会静静的待在磁盘中，而当内存充足时，会缓存到内存里以提升性能")])]),e._v(" "),t("h3",{attrs:{id:"es-流程核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-流程核心概念"}},[e._v("#")]),e._v(" ES 流程核心概念")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("index buffer")]),e._v("：内存缓冲区；一个"),t("code",[e._v("node")]),e._v("只有一块"),t("code",[e._v("index buffer")]),e._v("，所有"),t("code",[e._v("shard")]),e._v("共用。数据会在"),t("code",[e._v("index buffer")]),e._v("中排序、压缩")]),e._v(" "),t("li",[t("code",[e._v("index segment file")]),e._v("：存储倒排索引的文件，每个"),t("code",[e._v("segment")]),e._v("本质上就是一个倒排索引，每秒都会生成一个"),t("code",[e._v("segment")]),e._v("文件，当文件过多时"),t("code",[e._v("es")]),e._v("会自动进行"),t("code",[e._v("segment merge")]),e._v("（合并文件），合并时会同时将已经标注删除的文档物理删除")]),e._v(" "),t("li",[t("code",[e._v("commit point")]),e._v("：记录当前所有可用的"),t("code",[e._v("segment")]),e._v("（已经被"),t("code",[e._v("fsync")]),e._v("以后的数据，不包括在"),t("code",[e._v("page cache")]),e._v("的部分），每个"),t("code",[e._v("commit point")]),e._v("都会维护一个"),t("code",[e._v(".del")]),e._v("文件（"),t("code",[e._v("es")]),e._v("删除数据本质是不属于物理删除），当"),t("code",[e._v("es")]),e._v("做"),t("strong",[e._v("删改")]),e._v("操作时首先会在"),t("code",[e._v(".del")]),e._v("文件中声明某个"),t("code",[e._v("document")]),e._v("已经被删除，文件内记录了在某个"),t("code",[e._v("segment")]),e._v("内某个文档已经被删除，当查询请求过来时在"),t("code",[e._v("segment")]),e._v("中被删除的文件是能够查出来的，但是当返回结果时会根据"),t("code",[e._v("commit point")]),e._v("维护的那个"),t("code",[e._v(".del")]),e._v("文件把已经删除的文档过滤掉（真正落磁盘的可能有多份数据，这个记录那个被删掉了）")]),e._v(" "),t("li",[t("code",[e._v("translog")]),e._v("：为了防止"),t("code",[e._v("elasticsearch")]),e._v("宕机造成数据丢失保证可靠存储，"),t("code",[e._v("es")]),e._v("会在每次写入数据的同时写到"),t("code",[e._v("translog")]),e._v("日志中(图中会有详解)。"),t("code",[e._v("shard")]),e._v("级别，一个"),t("code",[e._v("translog")]),e._v("对应一个"),t("code",[e._v("shard")])]),e._v(" "),t("li",[t("code",[e._v("fsync")]),e._v("："),t("code",[e._v("translog")]),e._v("会每隔"),t("code",[e._v("5s")]),e._v("或者在一个变更请求完成之后执行一次"),t("code",[e._v("fsync")]),e._v("操作，将"),t("code",[e._v("translog")]),e._v("从缓存刷入磁盘，这个操作比较耗时，如果对数据一致性要求不是很高时建议将索引改为异步，如果节点宕机时会有"),t("code",[e._v("5s")]),e._v("的数据丢失")]),e._v(" "),t("li",[t("code",[e._v("refresh")]),e._v("："),t("code",[e._v("es")]),e._v("接收数据请求时先存入内存中，默认每隔一秒会从内存"),t("code",[e._v("buffer")]),e._v("中将数据写入"),t("code",[e._v("page cache")]),e._v("，这个过程叫做"),t("code",[e._v("refresh")])]),e._v(" "),t("li",[t("code",[e._v("flush")]),e._v("："),t("code",[e._v("es")]),e._v("默认每隔30分钟会将"),t("code",[e._v("page cache")]),e._v("中的数据刷入磁盘同时清空"),t("code",[e._v("translog")]),e._v("日志文件，这个过程叫做"),t("code",[e._v("flush")])])]),e._v(" "),t("h3",{attrs:{id:"es-写流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-写流程"}},[e._v("#")]),e._v(" ES 写流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/es%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B.png",alt:"ES写入原理"}})]),e._v(" "),t("h2",{attrs:{id:"es-scripting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-scripting"}},[e._v("#")]),e._v(" ES Scripting")]),e._v(" "),t("h3",{attrs:{id:"_1-使用script执行更新操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用script执行更新操作"}},[e._v("#")]),e._v(" 1. 使用"),t("code",[e._v("script")]),e._v("执行更新操作")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('POST product2/_update/4\n{\n  "script": {\n    "source": "ctx._source.price-=1"\n  }\n}\n#可以简写\nPOST product2/_update/4\n{\n  "script": "ctx._source.price-=1"\n}\n')])])]),t("h3",{attrs:{id:"_2-使用script执行脚本命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用script执行脚本命令"}},[e._v("#")]),e._v(" 2. 使用"),t("code",[e._v("script")]),e._v("执行脚本命令")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('POST product2/_update/3\n{\n  "script": {\n    "lang": "painless",\n    "source": "ctx._source.tags.add(\'无线充电\')"\n  }\n}\n#传参\nPOST product2/_update/3\n{\n  "script": {\n    "lang": "painless",\n    "source": "ctx._source.tags.add(params.tag_name)",\n    "params": {\n      "tag_name": "无线充电"\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_3-使用script执行删除操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用script执行删除操作"}},[e._v("#")]),e._v(" 3. 使用"),t("code",[e._v("script")]),e._v("执行删除操作")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# delete\nPOST product2/_update/15\n{\n  "script": {\n    "lang": "painless",\n    "source": "ctx.op=\'delete\'"\n  }\n}\n')])])]),t("h3",{attrs:{id:"_4-使用script执行插入更新操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用script执行插入更新操作"}},[e._v("#")]),e._v(" 4. 使用"),t("code",[e._v("script")]),e._v("执行插入更新操作")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# upsert   smartison  update insert\n#如果数据存在,执行partial update操作,如果数据不存在,那么执行create操作\nGET /product2/_doc/15\nPOST product2/_update/15\n{\n  "script": {\n    "source": "ctx._source.price += params.param1",\n    "lang": "painless",\n    "params": {\n      "param1": 100\n    }\n  },\n  "upsert": {\n    "name": "小米10",\n    "price": 1999\n  }\n}\n')])])]),t("h3",{attrs:{id:"_5-使用script执行-bulk-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用script执行-bulk-操作"}},[e._v("#")]),e._v(" 5. 使用"),t("code",[e._v("script")]),e._v("执行 _bulk 操作")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 错误的实例，需要改写成下面的语句\nPOST _bulk\n{\n  "update":{\n    "_index":"product2",\n    "_id":"15",\n    "retry_on_conflict":3\n  }\n}\n{\n  "script": {\n    "source": "ctx._source.price += params.param1",\n    "lang": "painless",\n    "params": {\n      "param1": 100\n    }\n  },\n  "upsert": {\n    "name": "小米10",\n    "price": 1999\n  }\n}\n#改成_bulk批量操作呢\nPOST _bulk\n{ "update" : { "_id" : "0", "_index" : "product2", "retry_on_conflict" : 3} }\n{ "script" : { "source": "ctx._source.price += params.param1", "lang" : "painless", "params" : {"param1" : 100}}, "upsert" : {"price" : 1999}}\n\n')])])]),t("h3",{attrs:{id:"_6-script的其他语言支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-script的其他语言支持"}},[e._v("#")]),e._v(" 6. "),t("code",[e._v("script")]),e._v("的其他语言支持")]),e._v(" "),t("ol",[t("li",[e._v("GET查询 除了"),t("code",[e._v("painless")]),e._v("(默认) ES还支持：")]),e._v(" "),t("li",[t("ul",[t("li",[t("code",[e._v("Groovy")]),e._v("："),t("code",[e._v("ES1.4.X")]),e._v("——"),t("code",[e._v("ES5.0")])]),e._v(" "),t("li",[t("code",[e._v("expression")]),e._v("：每个文档的开销较低：表达式的作用更多，可以非常快速地执行，甚至比编写native脚本还要快，支持javascript语法的子集：单个表达式。缺点：只能访问数字，布尔值，日期和geo_point字段，存储的字段不可用")]),e._v(" "),t("li",[t("code",[e._v("mustache")]),e._v("：提供模板参数化查询")]),e._v(" "),t("li",[t("code",[e._v("java")])]),e._v(" "),t("li",[t("code",[e._v("Painless")]),e._v("："),t("code",[e._v("Painless")]),e._v("是一种专门用于"),t("code",[e._v("Elasticsearch")]),e._v("的简单，用于内联和存储脚本，类似于Java，也有注释、关键字、类型、变量、函数等，安全的脚本语言。它是"),t("code",[e._v("Elasticsearch")]),e._v("的默认脚本语言，可以安全地用于内联和存储脚本")])])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('#这些语言应用场景更窄,但是可能性能更好\nGET product2/_search\n{\n  "script_fields": {\n    "test_field": {\n      "script": {\n        "lang":   "expression",\n        "source": "doc[\'price\']"\n      }\n    }\n  }\n}\nGET product2/_search\n{\n  "script_fields": {\n    "test_field": {\n      "script": {\n        "lang":   "painless",\n        "source": "doc[\'price\'].value"\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_7-script脚本语言性能比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-script脚本语言性能比较"}},[e._v("#")]),e._v(" 7. "),t("code",[e._v("script")]),e._v("脚本语言性能比较")]),e._v(" "),t("ol",[t("li",[e._v("Elasticsearch首次执行脚本时，将对其进行编译并将编译后的版本存储在缓存中。编译过程比较消耗性能。")]),e._v(" "),t("li",[e._v("如果需要将变量传递到脚本中，则应以命名形式传递变量，"),t("code",[e._v("params")]),e._v("而不是将值硬编码到脚本本身中。例如，如果您希望能够将字段值乘以不同的乘数，请不要将乘数硬编码到脚本中")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('#看took消耗\nGET product2/_search\n{\n  "script_fields": {\n    "test_field": {\n      "script": {\n        "lang":   "expression",\n        "source": "doc[\'price\'] * 9"\n      }\n    }\n  }\n}\nGET product2/_search\n{\n  "script_fields": {\n    "test_field": {\n      "script": {\n        "lang":   "painless",\n        "source": "doc[\'price\'].value * 9"\n      }\n    }\n  }\n}\n#更换num的值 对比took消耗   \nGET product2/_search\n{\n  "script_fields": {\n    "test_field": {\n      "script": {\n        "lang":   "expression",\n        "source": "doc[\'price\'] * num",\n        "params": {\n          "num": 6\n        }\n      }\n    }\n  }\n}\n#doc[\'price\'] * num只编译一次而doc[\'price\'] * 9 会随着数字改变而一直编译,ES默认每分钟支持15次编译\n')])])]),t("h3",{attrs:{id:"_8-script多脚本支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-script多脚本支持"}},[e._v("#")]),e._v(" 8. "),t("code",[e._v("script")]),e._v("多脚本支持")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('#例如 打8折价格\nGET product2/_search\n{\n  "script_fields": {\n    "discount_price": {\n      "script": {\n        "lang": "painless",\n        "source": "doc[\'price\'].value * params.discount",\n        "params": {\n          "discount": 0.8\n        }\n      }\n    }\n  }\n}\n# 原始价格 和 多个打折价格\nGET product2/_search\n{\n  "script_fields": {\n    "price": {\n      "script": {\n        "lang": "painless",\n        "source": "doc[\'price\'].value"\n      }\n    },\n    "discount_price": {\n      "script": {\n        "lang": "painless",\n        "source": "[doc[\'price\'].value * params.discount_8,doc[\'price\'].value * params.discount_7,doc[\'price\'].value * params.discount_6,doc[\'price\'].value * params.discount_5]",\n        "params": {\n          "discount_8": 0.8,\n          "discount_7": 0.7,\n          "discount_6": 0.6,\n          "discount_5": 0.5\n        }\n      }\n    }\n  }\n}\nGET product2/_search\n{\n  "script_fields": {\n    "discount_price": {\n      "script": {\n        "lang": "painless",\n        "source": "doc.price.value * params.discount",\n        "params": {\n          "discount": 0.8\n        }\n      }\n    }\n  }\n}\n# 那么遇到复杂脚本，写很多行怎么办呢\nPOST product2/_update/1\n{\n  "script": {\n    "lang": "painless",\n    "source": """\n      ctx._source.name += params.name;\n      ctx._source.price -= 1\n    """,\n    "params": {\n      "name": "无线充电",\n      "price": "1"\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_9-stored-scripts-script模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-stored-scripts-script模板"}},[e._v("#")]),e._v(" 9. "),t("code",[e._v("Stored scripts")]),e._v("："),t("code",[e._v("script")]),e._v("模板")]),e._v(" "),t("ol",[t("li",[e._v("可以理解为"),t("code",[e._v("script")]),e._v("模板，缓存在集群的"),t("code",[e._v("cache")]),e._v("中，作用域为整个集群")]),e._v(" "),t("li",[e._v("默认缓存大小是"),t("code",[e._v("100MB")]),e._v("，可以通过"),t("code",[e._v("script.cache.max_size")]),e._v("设置缓存大小")]),e._v(" "),t("li",[e._v("没有过期时间，可以通过"),t("code",[e._v("script.cache.expire")]),e._v("设置过期时间")]),e._v(" "),t("li",[e._v("脚本最大"),t("code",[e._v("64MB")]),e._v("，可以通过"),t("code",[e._v("script.max_size_in_bytes")]),e._v("设置脚本大小；有发生变更时会重新编译")])]),e._v(" "),t("p",[t("font",{attrs:{color:"red"}},[t("strong",[e._v("这里的"),t("code",[e._v("post")]),e._v("需要使用"),t("code",[e._v("doc")]),e._v("获取属性，因为这个最值是给"),t("code",[e._v("get")]),e._v("方法使用的")])])],1),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 格式\n# /_scripts/{id}  类似存储过程  计算折扣 作用域为整个集群\n# 增加 script 模板\nPOST _scripts/calculate-discount\n{\n  "script": {\n    "lang": "painless",\n    "source": "doc[\'price\'].value * params.discount"\n  }\n}\n# 查看 script 模板\nGET _scripts/calculate-discount\n# 删除 script 模板\nDELETE _scripts/calculate-discount\n# 使用 script 模板\nGET product2/_search\n{\n  "script_fields": {\n    "discount_price": {\n      "script": {\n        "id":"calculate-discount",\n        "params": {\n          "discount": 0.8\n        }\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_10-dates-日期的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-dates-日期的使用"}},[e._v("#")]),e._v(" 10. "),t("code",[e._v("Dates")]),e._v("：日期的使用")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("ZonedDateTime")]),e._v("类型，因此它们支持诸如之类的方法"),t("code",[e._v("getYear")]),e._v("，"),t("code",[e._v("getDayOfWeek")]),e._v("或例如从"),t("code",[e._v("1970年")]),e._v("开始到该时间的毫秒数"),t("code",[e._v("getMillis")]),e._v("。要在脚本中使用它们，请省略"),t("code",[e._v("get")]),e._v("前缀并首字母小写的驼峰标识。")]),e._v(" "),t("ol",[t("li",[e._v("getMonth()")]),e._v(" "),t("li",[e._v("getDayOfMonth()")]),e._v(" "),t("li",[e._v("getDayOfWeek()")]),e._v(" "),t("li",[e._v("getDayOfYear()")]),e._v(" "),t("li",[e._v("getHour()")]),e._v(" "),t("li",[e._v("getMinute()")]),e._v(" "),t("li",[e._v("getSecond()")]),e._v(" "),t("li",[e._v("getNano()")])])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 时间类型的使用\nGET product2/_search/1\n{\n  "script_fields": {\n    "test_year": {\n      "script": {\n        "source": "doc.createtime.value.year"\n      }\n    }\n  }\n}\n')])])]),t("h3",{attrs:{id:"_11-script正则表达式的支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-script正则表达式的支持"}},[e._v("#")]),e._v(" 11. "),t("code",[e._v("script")]),e._v("正则表达式的支持")]),e._v(" "),t("blockquote",[t("p",[e._v("需要先启用配置：`script.painless.regex.enabled: true；会影响查询性能")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('POST product2/_update/1\n{\n  "script": {\n    "lang": "painless",\n    "source": """\n      if (ctx._source.name =~ /[\\s\\S]*phone[\\s\\S]*/) {\n        ctx._source.name += "***|";\n      } else {\n        ctx.op = "noop";\n      }\n    """\n  }\n}\n#[0-9]{4}-[0-9]{2}-[0-9]{2}匹配出来的不一定是日期 比如  9999-99-99  但是日期一定能匹配上\nPOST product2/_update/1\n{\n  "script": {\n    "lang": "painless",\n    "source": """\n      if (ctx._source.createtime ==~ /[0-9]{4}-[0-9]{2}-[0-9]{2}/) {\n        ctx._source.name += "|***";\n      } else {\n        ctx.op = "noop";\n      }\n    """\n  }\n}\n')])])]),t("h3",{attrs:{id:"_12-使用script进行聚合查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-使用script进行聚合查询"}},[e._v("#")]),e._v(" 12. 使用"),t("code",[e._v("script")]),e._v("进行聚合查询")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('#统计所有小于1000商品tag的 数量 不考虑去重\nGET /product/_search\nGET /product/_search\n{\n  "query": {\n    "bool": {\n      "filter": [\n        {\n          "range": {\n            "price": {\n              "lt": 1000\n            }\n          }\n        }\n      ]\n    }\n  },\n  "aggs": {\n    "tag_agg_group": {\n      "sum": {\n        "script": {\n          "lang": "painless",\n          "source": """\n            int total = 0;\n            for (int i = 0; i < doc[\'tags.keyword\'].length; i++) {\n               total++;\n            }\n            return total;\n          """\n        }\n      }\n    }\n  },\n  "size": 0\n}\n')])])]),t("h3",{attrs:{id:"_13-script关于上下文件对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-script关于上下文件对象"}},[e._v("#")]),e._v(" 13. "),t("code",[e._v("script")]),e._v("关于上下文件对象")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("doc['field'].value")]),e._v("和"),t("code",[e._v("params['_source']['field']")]),e._v("：理解之间的区别是很重要的，"),t("code",[e._v("doc['field'].value")]),e._v("和"),t("code",[e._v("params['_source']['field']")]),e._v("。首先，使用"),t("code",[e._v("doc")]),e._v("关键字，将导致该字段的条件被加载到内存（缓存），这将导致更快的执行，但更多的内存消耗。此外，"),t("code",[e._v("doc[...]")]),e._v("符号只允许简单类型（不能返回一个复杂类型("),t("code",[e._v("JSON")]),e._v("对象或者"),t("code",[e._v("nested")]),e._v("类型)），只有在非分析或单个词条的基础上有意义。但是，"),t("code",[e._v("doc")]),e._v("如果可能，使用仍然是从文档访问值的推荐方式，因为"),t("code",[e._v("_source")]),e._v("每次使用时都必须加载并解析。使用"),t("code",[e._v("_source")]),e._v("非常缓慢")])]),e._v(" "),t("ol",[t("li",[t("p",[e._v("在 post 的请求当中, 使用"),t("code",[e._v("ctx._source.<field-name>")]),e._v("获取属性的值")])]),e._v(" "),t("li",[t("p",[e._v("在 get 的请求当中，使用"),t("code",[e._v("doc['<field-name>']")]),e._v("获取属性的值")])]),e._v(" "),t("li",[t("p",[e._v("在 expression 语言中使用"),t("code",[e._v("doc['<field-name>']")]),e._v("获取属性的值")])]),e._v(" "),t("li",[t("p",[e._v("在 painless 语言中使用"),t("code",[e._v("doc['<field-name>'].value")]),e._v("获取属性的值")])]),e._v(" "),t("li",[t("p",[e._v("在 painless 语言中，当数组中有对象时，使用"),t("code",[e._v("params['_source']['field-name']")]),e._v(" 获取属性的值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("doc['field-name'].value => params['_source']['field-name']\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"分词器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分词器"}},[e._v("#")]),e._v(" 分词器")]),e._v(" "),t("h3",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[e._v("#")]),e._v(" 作用")]),e._v(" "),t("ol",[t("li",[e._v("分词")]),e._v(" "),t("li",[t("code",[e._v("normalization")]),e._v("（提升"),t("code",[e._v("recall")]),e._v("召回率：能搜索到的结果比率）")])]),e._v(" "),t("h3",{attrs:{id:"分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析器"}},[e._v("#")]),e._v(" 分析器")]),e._v(" "),t("h4",{attrs:{id:"_1-character-filter-mapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-character-filter-mapping"}},[e._v("#")]),e._v(" 1. character filter（mapping）")]),e._v(" "),t("p",[t("strong",[e._v("分词之前预处理")]),e._v("：过滤无用字符、标签等，转换一些&=>and，《Elasticsearch》=> Elasticsearch")]),e._v(" "),t("ol",[t("li",[t("p",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-htmlstrip-charfilter.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTML Strip Character Filter"),t("OutboundLink")],1),e._v("："),t("code",[e._v("html_strip")]),e._v("；")]),e._v(" "),t("ul",[t("li",[e._v("参数："),t("code",[e._v("escaped_tags")]),e._v("需要保留的"),t("code",[e._v("html")]),e._v("标签")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# character filter\n# HTML Strip Character Filter\nPUT my_index\n{\n  "settings": {\n    "analysis": {\n      "char_filter": {\n        "my_char_filter": {\n          "type": "html_strip",\n          "escaped_tags": ["a"]\n        }\n      },\n      "analyzer": {\n        "my_analyzer": {\n          "tokenizer": "keyword",\n          "char_filter": ["my_char_filter"]\n        }\n      }\n    }\n  }\n}\nPOST my_index/_analyze\n{\n  "analyzer": "my_analyzer",\n  "text": "<p>I&apos;m so <a>happy</a>!</p>"\n}\n')])])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-mapping-charfilter.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mapping Character Filter"),t("OutboundLink")],1),e._v("：type mapping")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# Mapping Character Filter\nPUT my_index2\n{\n  "settings": {\n    "analysis": {\n      "char_filter": {\n        "my_char_filter": {\n          "type": "mapping",\n          "mappings": [\n            "٠ => 0",\n            "١ => 1",\n            "٢ => 2",\n            "٣ => 3",\n            "٤ => 4",\n            "٥ => 5",\n            "٦ => 6",\n            "٧ => 7",\n            "٨ => 8",\n            "٩ => 9"\n          ]\n        }\n      },\n      "analyzer": {\n        "my_analyzer": {\n          "tokenizer": "keyword",\n          "char_filter": [\n            "my_char_filter"\n          ]\n        }\n      }\n    }\n  }\n}\nPOST my_index2/_analyze\n{\n  "analyzer": "my_analyzer",\n  "text": "My license plate is ٢٥٠١٥"\n}\n')])])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-replace-charfilter.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pattern Replace Character Filter"),t("OutboundLink")],1),e._v("：type pattern_replace")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# Pattern Replace Character Filter\nPUT my_index3\n{\n  "settings": {\n    "analysis": {\n      "char_filter": {\n        "my_char_filter": {\n          "type": "pattern_replace",\n          "pattern": "(\\\\d+)-(?=\\\\d)",\n          "replacement": "$1_"\n        }\n      },\n      "analyzer": {\n        "my_analyzer": {\n          "tokenizer": "standard",\n          "char_filter": ["my_char_filter"]\n        }\n      }\n    }\n  }\n}\nPOST my_index3/_analyze\n{\n  "analyzer": "my_analyzer",\n  "text": "123-456-789"\n}\n')])])])])]),e._v(" "),t("h4",{attrs:{id:"_2-tokenizer-分词器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-tokenizer-分词器"}},[e._v("#")]),e._v(" 2. tokenizer（分词器）")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET _analyze\n{\n  "tokenizer" : "standard",\n  "filter" : ["lowercase"],\n  "text" : "THE Quick FoX JUMPs"\n}\n')])])]),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET /_analyze\n{\n  "tokenizer": "standard",\n  "filter": [\n    {\n      "type": "condition",\n      "filter": [ "lowercase" ],\n      "script": {\n        "source": "token.getTerm().length() < 5"\n      }\n    }\n  ],\n  "text": "THE QUICK BROWN FOX"\n}\n')])])]),t("h4",{attrs:{id:"_3-token-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-token-filter"}},[e._v("#")]),e._v(" 3. token filter")]),e._v(" "),t("p",[e._v("停用词、时态转换、大小写转换、同义词转换、语气词处理等。比如：has => have  him => he  apples => apple  the / oh / a=>干掉")]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('PUT /my_index4\n{\n  "settings": {\n    "analysis": {\n      "analyzer": {\n        "my_analyzer":{\n          "type":"standard",\n          "stopwords":"_english_"\n        }\n      }\n    }\n  }\n}\n# 使用自定义analysis\nGET my_index4/_analyze\n{\n  "analyzer": "my_analyzer",\n  "text": "Teacher Ma is in the restroom"\n}\n# 使用系统自带analysis\nGET my_index4/_analyze\n{\n  "tokenizer": "standard",\n  "filter":["lowercase"],\n  "text": "Teacher Ma is in the restroom"\n}\n')])])]),t("h3",{attrs:{id:"es-内置分词器-7-6有15种自带分词器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-内置分词器-7-6有15种自带分词器"}},[e._v("#")]),e._v(" ES 内置分词器（7.6有15种自带分词器）")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("standard analyzer")]),e._v("：默认分词器，中文支持的不理想，会逐字拆分\n"),t("ul",[t("li",[t("code",[e._v("max_token_length")]),e._v("：最大令牌长度。如果看到令牌超过此长度，则将其"),t("code",[e._v("max_token_length")]),e._v("间隔分割。默认为255")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pattern Tokenizer"),t("OutboundLink")],1),e._v("：以正则匹配分隔符，把文本拆分成若干词项")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simplepattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Simple Pattern Tokenizer"),t("OutboundLink")],1),e._v("：以正则匹配词项，速度比"),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pattern Tokenizer"),t("OutboundLink")],1),e._v("快")]),e._v(" "),t("li",[t("code",[e._v("whitespace analyzer")]),e._v("：以空白符分隔"),t("code",[e._v("Tim_cookie")])])]),e._v(" "),t("h3",{attrs:{id:"自定义分析器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义分析器"}},[e._v("#")]),e._v(" 自定义分析器")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("tokenizer")]),e._v("：内置或自定义分词器。（需要）")]),e._v(" "),t("li",[t("code",[e._v("char_filter")]),e._v("：内置或自定义"),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-charfilters.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("字符过滤器"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v("：内置或自定义"),t("code",[e._v("token filter")])]),e._v(" "),t("li",[t("code",[e._v("position_increment_gap")]),e._v("：在为文本值数组建立索引时，"),t("code",[e._v("Elasticsearch")]),e._v("在一个值的最后一项和下一个值的第一项之间插入一个假的“空白”，以确保词组查询与来自不同数组元素的两项不匹配。默认为100。查看"),t("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/position-increment-gap.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("position_increment_gap"),t("OutboundLink")],1),e._v("更多。")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('# 自定义 analysis\n# 设置type为custom告诉Elasticsearch我们正在定义一个定制分析器。将此与配置内置分析器的方式进行比较： type将设置为内置分析器的名称，如 standard或simple\nPUT /test_analysis\n{\n  "settings": {\n    "analysis": {\n      "char_filter": {\n        "test_char_filter": {\n          "type": "mapping",\n          "mappings": [\n            "& => and",\n            "| => or"\n          ]\n        }\n      },\n      "filter": {\n        "test_stopwords": {\n          "type": "stop",\n          "stopwords": ["is","in","at","the","a","for"]\n        }\n      },\n      "tokenizer": {\n        "punctuation": { \n          "type": "pattern",\n          "pattern": "[ .,!?]"\n        }\n      },\n      "analyzer": {\n        "my_analyzer": {\n          "type": "custom",\n          "char_filter": [\n            "html_strip",\n            "test_char_filter"\n          ],\n          "tokenizer": "standard",\n          "filter": ["lowercase","test_stopwords"]\n        }\n      }\n    }\n  }\n}\nGET /test_analysis/_analyze\n{\n  "text": "Teacher ma & zhang also thinks [mother\'s friends] is good | nice!!!",\n  "analyzer": "my_analyzer"\n}\n')])])]),t("h3",{attrs:{id:"中文分词器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中文分词器"}},[e._v("#")]),e._v(" 中文分词器")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("IK")]),e._v("分词："),t("code",[e._v("ES")]),e._v("的安装目录  不要有中文和空格")]),e._v(" "),t("ol",[t("li",[e._v("下载：https://github.com/medcl/elasticsearch-analysis-ik")]),e._v(" "),t("li",[e._v("创建插件文件夹 "),t("code",[e._v("cd your-es-root/plugins/ && mkdir ik")])]),e._v(" "),t("li",[e._v("将插件解压缩到文件夹"),t("code",[e._v("your-es-root/plugins/ik")])]),e._v(" "),t("li",[e._v("重新启动"),t("code",[e._v("es")])])])]),e._v(" "),t("li",[t("p",[e._v("两种"),t("code",[e._v("analyzer")])]),e._v(" "),t("ol",[t("li",[t("code",[e._v("ik_max_word")]),e._v("：细粒度")]),e._v(" "),t("li",[t("code",[e._v("ik_smart")]),e._v("：粗粒度")])]),e._v(" "),t("div",{staticClass:"language-http extra-class"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[e._v('GET _analyze\n{\n  "analyzer": "ik_smart",\n  "text" : "我爱中华人民共和国"\n}\nGET _analyze\n{\n  "analyzer": "ik_max_word",\n  "text" : "我爱中华人民共和国"\n}\nGET _analyze\n{\n  "analyzer": "standard",\n  "text" : "我爱中华人民共和国"\n}\n')])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("IK")]),e._v("文件描述")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("IKAnalyzer.cfg.xml")]),e._v("：IK分词配置文件")]),e._v(" "),t("li",[e._v("主词库："),t("code",[e._v("main.dic")])]),e._v(" "),t("li",[e._v("英文停用词："),t("code",[e._v("stopword.dic")]),e._v("，不会建立在倒排索引中")]),e._v(" "),t("li",[e._v("特殊词库：\n"),t("ul",[t("li",[t("code",[e._v("quantifier.dic")]),e._v("：特殊词库：计量单位等")]),e._v(" "),t("li",[t("code",[e._v("suffix.dic")]),e._v("：特殊词库：后缀名")]),e._v(" "),t("li",[t("code",[e._v("surname.dic")]),e._v("：特殊词库：百家姓")]),e._v(" "),t("li",[t("code",[e._v("preposition")]),e._v("：特殊词库：语气词")])])]),e._v(" "),t("li",[e._v("自定义词库：比如当下流行词：857、emmm...、渣女、舔屏、996")]),e._v(" "),t("li",[e._v("热更新")]),e._v(" "),t("li",[e._v("修改"),t("code",[e._v("ik")]),e._v("分词器源码（"),t("strong",[e._v("最好是通过扩展的方式，不要硬改源码")]),e._v("）")]),e._v(" "),t("li",[e._v("基于"),t("code",[e._v("ik")]),e._v("分词器原生支持的热更新方案，部署一个"),t("code",[e._v("web")]),e._v("服务器，提供一个"),t("code",[e._v("http")]),e._v("接口，通过"),t("code",[e._v("modified")]),e._v("和"),t("code",[e._v("tag")]),e._v("两个"),t("code",[e._v("http")]),e._v("响应头，来提供词语的热更新")])])])]),e._v(" "),t("h2",{attrs:{id:"es-java-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es-java-api"}},[e._v("#")]),e._v(" ES Java API")])])}),[],!1,null,null,null);a.default=n.exports}}]);