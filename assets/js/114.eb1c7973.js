(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{467:function(a,t,s){"use strict";s.r(t);var r=s(42),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[a._v("#")]),a._v(" 分布式锁")]),a._v(" "),s("h2",{attrs:{id:"逻辑推理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑推理"}},[a._v("#")]),a._v(" 逻辑推理")]),a._v(" "),s("h3",{attrs:{id:"什么是锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是锁"}},[a._v("#")]),a._v(" 什么是锁")]),a._v(" "),s("p",[a._v("锁就是用来保护有限的资源；")]),a._v(" "),s("h3",{attrs:{id:"解决了什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决了什么问题"}},[a._v("#")]),a._v(" 解决了什么问题")]),a._v(" "),s("p",[a._v("人多资源少的问题")]),a._v(" "),s("h3",{attrs:{id:"单机版怎么玩的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单机版怎么玩的"}},[a._v("#")]),a._v(" 单机版怎么玩的")]),a._v(" "),s("p",[a._v("同步+信号量")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Synchronized wait notify")])]),a._v(" "),s("li",[s("p",[a._v("ReentrantLock lock unlock")]),a._v(" "),s("p",[a._v("AbstractQueuedSynchronizer（AQS，FIFO先进先出的队列 + volatile state），公平锁")])]),a._v(" "),s("li",[s("p",[a._v("AtomicInteger")]),a._v(" "),s("p",[a._v("自选锁CAS，非公平锁")])])]),a._v(" "),s("h3",{attrs:{id:"分布式怎么玩的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式怎么玩的"}},[a._v("#")]),a._v(" 分布式怎么玩的")]),a._v(" "),s("ul",[s("li",[a._v("单机版的锁 + TCP/IP")])]),a._v(" "),s("h2",{attrs:{id:"什么是分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式锁"}},[a._v("#")]),a._v(" 什么是分布式锁")]),a._v(" "),s("p",[a._v("当多个进程在同一个系统中，用分布式锁控制多个进程对资源的访问")]),a._v(" "),s("h2",{attrs:{id:"分布式锁的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁的应用场景"}},[a._v("#")]),a._v(" 分布式锁的应用场景")]),a._v(" "),s("ul",[s("li",[a._v("传统的单体应用单机部署情况下，可以使用Java并发处理相关的API进行互斥控制")]),a._v(" "),s("li",[a._v("分布式系统由于多线程，多进程分布在不同的机器上，使单机部署情况下的并发控制策略失效，为了解决跨JVM互斥机制来控制共享资源的访问，这就是分布式锁的来源；分布式锁应用场景大都是高并发，大流量的场景。")])]),a._v(" "),s("h2",{attrs:{id:"分布锁的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布锁的实现"}},[a._v("#")]),a._v(" 分布锁的实现")]),a._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[a._v("#")]),a._v(" 特点")]),a._v(" "),s("ol",[s("li",[a._v("互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁")]),a._v(" "),s("li",[a._v("安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除")]),a._v(" "),s("li",[a._v("防死锁：获取锁的客户端因为某些原因（如down机等），需要设置一个策略把锁释放掉，否则其他客户端再也无法获取到该锁")]),a._v(" "),s("li",[a._v("容错性：当部分服务节点down机时，客户端仍然能够获取锁和释放锁")])]),a._v(" "),s("h2",{attrs:{id:"基于数据库行级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于数据库行级锁"}},[a._v("#")]),a._v(" 基于数据库行级锁")]),a._v(" "),s("h2",{attrs:{id:"基于zookeeper的分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于zookeeper的分布式锁"}},[a._v("#")]),a._v(" 基于Zookeeper的分布式锁")]),a._v(" "),s("h2",{attrs:{id:"基于redis的分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于redis的分布式锁"}},[a._v("#")]),a._v(" 基于Redis的分布式锁")]),a._v(" "),s("h3",{attrs:{id:"redis单节点加锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis单节点加锁"}},[a._v("#")]),a._v(" Redis单节点加锁")]),a._v(" "),s("p",[a._v("基于Redis命令：SET key value NX EX max-lock-time，需要手动实现锁的延期")]),a._v(" "),s("h3",{attrs:{id:"redisson加锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redisson加锁"}},[a._v("#")]),a._v(" Redisson加锁")]),a._v(" "),s("p",[a._v("redisson加锁的奇数个实例之间毫无任何关系，不需要进行数据同步，只要过半成功就说明加锁成功了。redisson会起一个线程，当执行时间到达锁过期时间的1/3时，如果依然没有执行完成，则进行锁的有效期延长；如果当前线程获取到锁之后，就宕机了，那么当过了锁的有效期之后，锁会被自动释放。")]),a._v(" "),s("p",[s("img",{attrs:{src:"%5Cimages%5C%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-redisson.png",alt:"分布式锁-redisson"}})]),a._v(" "),s("h3",{attrs:{id:"redisson加锁实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redisson加锁实现"}},[a._v("#")]),a._v(" Redisson加锁实现")]),a._v(" "),s("ol",[s("li",[a._v("加锁机制：根据hash节点选择一个客户端执行Lua脚本")]),a._v(" "),s("li",[a._v("所互斥机制：再来一个客户端执行同样的Lua脚本会提示已经存在锁，然后进入循环一直尝试加锁")]),a._v(" "),s("li",[a._v("可重入机制")]),a._v(" "),s("li",[a._v("watch dog 自动延期机制")]),a._v(" "),s("li",[a._v("释放锁机制")])]),a._v(" "),s("h1",{attrs:{id:"分布式id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式id"}},[a._v("#")]),a._v(" 分布式ID")])])}),[],!1,null,null,null);t.default=e.exports}}]);