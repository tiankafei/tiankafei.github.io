(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{418:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" git命令")]),t._v(" "),s("h2",{attrs:{id:"git同时连接多个远程仓库的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git同时连接多个远程仓库的配置"}},[t._v("#")]),t._v(" git同时连接多个远程仓库的配置")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("查看远程仓库")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n")])])])]),t._v(" "),s("li",[s("p",[t._v("添加远程仓库")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git remote add 别名 远程仓库地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@gitee.com:tiankafei/tiankafei.git\n")])])])]),t._v(" "),s("li",[s("p",[t._v("如果此时一直pull不下去，也push不上去，可以使用以下命令使远程仓库和本地同步，消除差异")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git pull 别名 分支名 --allow-unrelated-histories")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master --allow-unrelated-histories\n")])])])]),t._v(" "),s("li",[s("p",[t._v("消除远程仓库与本地仓库的差异之后，执行推送")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git push 别名 分支名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])])]),t._v(" "),s("li",[s("p",[t._v("多个远程分值的提交记录，必须一致才能够一起push远程仓库，如果有一个不一致的就不能同步进行。如果发现有不一致的，重复上述操作。一直到所有远程仓库的提交记录一致为止。")])]),t._v(" "),s("li",[s("p",[t._v("删除所有远程仓库的配置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git remote remove 别名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote remove origin\n")])])])]),t._v(" "),s("li",[s("p",[t._v("选择一个主仓库，用来拉取")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git remote add 别名 分支名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@gitee.com:tiankafei/tiankafei.git\n")])])])]),t._v(" "),s("li",[s("p",[t._v("把其他仓库加进来")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git remote set-url --add 别名 远程仓库地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url --add origin git@github.com:tiankafei/tiankafei.git\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用以上加入远程仓库命令的好处是：当执行 git push origin master时，会直接把代码一起push到多个远程仓库。")])])]),t._v(" "),s("h2",{attrs:{id:"码云、github如何更新fork后的代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#码云、github如何更新fork后的代码"}},[t._v("#")]),t._v(" 码云、GitHub如何更新fork后的代码")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("clone 自己的fork分支到本地")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@gitee.com:tiankafei/RuoYi.git\n")])])])]),t._v(" "),s("li",[s("p",[t._v("增加源分支地址到你项目远程分支列表中(此处是关键)，先得将原来的仓库指定为upstream，命令为")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" upstream https://gitee.com/y_project/RuoYi.git\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" upstream https://gitee.com/geekidea/spring-boot-plus.git\n")])])]),s("p",[t._v("此处可使用git remote -v查看远程分支列表")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n")])])])]),t._v(" "),s("li",[s("p",[t._v("fetch源分支的新版本到本地")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch upstream\n")])])])]),t._v(" "),s("li",[s("p",[t._v("合并两个版本的代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge upstream/master\n")])])])]),t._v(" "),s("li",[s("p",[t._v("将合并后的代码push到码云或github上去")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"git版本回退相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git版本回退相关问题"}},[t._v("#")]),t._v(" git版本回退相关问题")]),t._v(" "),s("h3",{attrs:{id:"本地分支版本回退的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地分支版本回退的方法"}},[t._v("#")]),t._v(" 本地分支版本回退的方法")]),t._v(" "),s("p",[t._v("如果在本地做了错误提交，回退版本的方法为：")]),t._v(" "),s("ol",[s("li",[t._v("使用git reflog命令查看历史提交记录的commit id")]),t._v(" "),s("li",[t._v("使用git reset --hard commit_id，commit_id为你要回退版本的commit id的前几位")])]),t._v(" "),s("h3",{attrs:{id:"自己的远程分支版本回退的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自己的远程分支版本回退的方法"}},[t._v("#")]),t._v(" 自己的远程分支版本回退的方法")]),t._v(" "),s("ol",[s("li",[t._v("使用git reflog命令查看历史提交记录的commit id")]),t._v(" "),s("li",[t._v("使用git reset --hard commit_id回退本地分支，commit_id为你要回退版本的commit id的前几位")]),t._v(" "),s("li",[t._v("使用git push -f强制推送到远程分支")])]),t._v(" "),s("h3",{attrs:{id:"公共远程分支版本回退的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公共远程分支版本回退的方法"}},[t._v("#")]),t._v(" 公共远程分支版本回退的方法")]),t._v(" "),s("ol",[s("li",[t._v("使用git reflog命令查看历史提交记录的commit id")]),t._v(" "),s("li",[t._v("使用git revert commit_id或者git revert HEAD~0/1/2指令撤销最近的提交")]),t._v(" "),s("li",[t._v("revert合并代码，主要是去掉新代码，解决冲突；如果没有冲突，使用使用git push -f强制推送到远程分支")]),t._v(" "),s("li",[t._v("没有办法的办法")]),t._v(" "),s("li",[t._v("从头再来，删仓重建")])]),t._v(" "),s("h3",{attrs:{id:"需要注意的点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需要注意的点"}},[t._v("#")]),t._v(" 需要注意的点")]),t._v(" "),s("ol",[s("li",[t._v("使用git reflog命令后，如果记录很长，可以在大写锁定状态下输入一次'Q'或者两次'Z'退出git log和git reflog状态")]),t._v(" "),s("li",[t._v("git revert指令注意事项\n"),s("ol",[s("li",[t._v("revert是撤销一次提交，所以commit id是你要回滚到的版本的前一次提交")]),t._v(" "),s("li",[t._v("使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么再执行一次就相当于撤销了上次的撤销操作，即连续两次执行revert HEAD命令，相当于没有执行")]),t._v(" "),s("li",[t._v("使用revert HEAD~1表示撤销最近2次提交，后面的数字是从0开始的，即revert HEAD~n撤销n+1次提交")]),t._v(" "),s("li",[t._v("如果使用revert撤销的不是最近一次提交，那么一定会有代码冲突，需要合并代码，合并代码只需要把当前的代码全部取消，保留之前版本的代码即可。")])])])]),t._v(" "),s("h2",{attrs:{id:"git-for-windows下的filename-too-long"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-for-windows下的filename-too-long"}},[t._v("#")]),t._v(" git for windows下的Filename too long")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.longpaths "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("h2",{attrs:{id:"git的标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的标签"}},[t._v("#")]),t._v(" git的标签")]),t._v(" "),s("h3",{attrs:{id:"git查看所有的标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git查看所有的标签"}},[t._v("#")]),t._v(" git查看所有的标签")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n")])])]),s("h3",{attrs:{id:"git查看标签代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git查看标签代码"}},[t._v("#")]),t._v(" git查看标签代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout tag_name\n")])])]),s("blockquote",[s("p",[t._v("但是，这时候 git 可能会提示你当前处于一个“detached HEAD” 状态。因为 tag 相当于是一个快照，是不能更改它的代码的。如果要在 tag 代码的基础上做修改，你需要一个分支")])]),t._v(" "),s("h3",{attrs:{id:"git切换到某个tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git切换到某个tag"}},[t._v("#")]),t._v(" git切换到某个tag")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b branch_name tag_name\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);