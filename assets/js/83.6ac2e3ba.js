(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{429:function(s,a,e){"use strict";e.r(a);var t=e(42),v=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"redis介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis介绍"}},[s._v("#")]),s._v(" redis介绍")]),s._v(" "),e("h2",{attrs:{id:"redis原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis原理"}},[s._v("#")]),s._v(" redis原理")]),s._v(" "),e("blockquote",[e("p",[s._v("redis是单进程，单线程，为什么还那么快？")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。内存比磁盘快了10W倍")]),s._v(" "),e("p",[s._v("内存寻址是ns(纳秒)，磁盘寻址是ms(毫秒)，中间差了10W倍")])]),s._v(" "),e("li",[e("p",[s._v("使用多路I/O复用模型的非阻塞IO，Redis的Epoll 事件模型处理请求，任意一个客户端的资源就绪之后就可以被执行，且能够顺序执行")])]),s._v(" "),e("li",[e("p",[s._v("由于是单线程，因此减少了线程切换的消耗")])]),s._v(" "),e("li",[e("p",[s._v("支持管道，一次发送多次请求，减少频繁IO")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("一次性大量插入数据")])]),s._v(" "),e("li",[e("p",[s._v("从文件中批量插入数据")]),s._v(" "),e("p",[s._v("文件的换行符需要注意：redis-cli中只支持dos格式的换行符 "),e("code",[s._v("\\r\\n")]),s._v(" ，如果你在Linux下、Mac下或者Windows下创建的文件，最好都转个码。没有转码的文件,执行会失败。")]),s._v(" "),e("p",[s._v("安装转码命令")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("yum "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y unix2dos\n")])])])])])])])]),s._v(" "),e("h2",{attrs:{id:"linux内核"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux内核"}},[s._v("#")]),s._v(" linux内核")]),s._v(" "),e("blockquote",[e("p",[s._v("在linux系统中：“一切皆文件”。每一个socket连接都会生成一些文件描述符，由linux内核接收并进行转发给应用进程或线程。")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看文件描述")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" redis\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /proc/进程id号/fd\nll\n")])])])]),s._v(" "),e("h2",{attrs:{id:"redis安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis安装"}},[s._v("#")]),s._v(" redis安装")]),s._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[s._v("安装wget工具")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("yum "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("下载redis")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" http://download.redis.io/releases/redis-5.0.7.tar.gz\n")])])])]),s._v(" "),e("li",[e("p",[s._v("解压")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -zvxf redis-5.0.7.tar.gz\n")])])])]),s._v(" "),e("li",[e("p",[s._v("进入源码目录")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" redis-5.0.7/src\n")])])])]),s._v(" "),e("li",[e("p",[s._v("执行编译")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("yum -y "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" gcc gcc-c++ kernel-devel\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("进入源码目录，查看是否生成了可执行程序")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("ll\n")])])])]),s._v(" "),e("li",[e("p",[s._v("重新安装到制定目录")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PREFIX")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/local/redis5\n")])])])]),s._v(" "),e("li",[e("p",[s._v("设置redis环境变量")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/profile\n")])])]),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("JAVA_HOME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/java/default\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REDIS_HOME")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/local/redis5\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v("/bin:"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REDIS_HOME")]),s._v("/bin\n")])])]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" /etc/profile\n")])])])]),s._v(" "),e("li",[e("p",[s._v("redis实例安装")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" redis-5.0.7/utils\n./install_server.sh\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#a)一个物理机中可以有多个redis实例（进程），通过port区分")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#b)可执行程序就一份在目录，但是内存中未来的多个实例需要各自的配置文件，持久化目录等资源")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#c)service   redis_6379  start/stop/stauts     >   linux   /etc/init.d/**** ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#d)脚本还会帮你启动！")]),s._v("\n\nConfig "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" /etc/redis/6379.conf\nLog "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" /var/log/redis_6379.log\nData "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" /var/lib/redis/6379\nExecutable     "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" /usr/local/bin/redis-server\n")])])])]),s._v(" "),e("li",[e("p",[s._v("停止redis")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" redis_6379 stop\n")])])])]),s._v(" "),e("li",[e("p",[s._v("启动redis")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" redis_6379 start\n")])])])]),s._v(" "),e("li",[e("p",[s._v("查看redis状态")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" redis_6379 status\n")])])])]),s._v(" "),e("li",[e("p",[s._v("查看redis启动是否成功")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" redis\n")])])])]),s._v(" "),e("li",[e("p",[s._v("客户端连接命令")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("redis-cli -h localhost -p "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" -a password\n")])])])]),s._v(" "),e("li",[e("p",[s._v("更新redis配置，增加密码")]),s._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/redis/6379.conf\n")])])]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("bind")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".0.101\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# masterauth <master-password>")]),s._v("\nrequirepass tiankafei\n")])])])]),s._v(" "),e("li",[e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("systemctl "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" redis_6379.service\n")])])])]),s._v(" "),e("li",[e("p",[s._v("设置密码之后，停止服务会报错")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/init.d/redis_6379\n")])])]),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加密码这一行")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PASSWORD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" $CONF"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\s*requirepass'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/\"//g'")]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $CLIEXEC -p $REDISPORT shutdown 替换为")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" -z "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PASSWORD")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" \n    "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CLIEXEC")]),s._v(" -p "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REDISPORT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$CLIEXEC")]),s._v(" -a "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PASSWORD")]),s._v(" -p "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REDISPORT")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("重新加载")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("systemctl daemon-reload\n")])])])])])]),s._v(" "),e("h2",{attrs:{id:"redis使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis使用"}},[s._v("#")]),s._v(" redis使用")]),s._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[s._v("正反向索引")]),s._v(" "),e("p",[s._v("正向（从左到右）：顺序从0开始，+1")]),s._v(" "),e("p",[s._v("反向（从右到左）：顺序从-1开始，-1")]),s._v(" "),e("p",[s._v("通过start=0,end=-1可以获取当前key的所有数据")])]),s._v(" "),e("li",[e("p",[s._v("Redis key值是二进制安全的，这意味着可以用任何二进制序列作为key值")]),s._v(" "),e("p",[s._v("从形如”foo”的简单字符串到一个JPEG文件的内容都可以。空字符串也是有效key值。")])]),s._v(" "),e("li",[e("p",[s._v("关于key的几条规则")]),s._v(" "),e("ol",[e("li",[s._v("太长的键值不是个好主意，例如1024字节的键值就不是个好主意，不仅因为消耗内存，而且在数据中查找这类键值的计算成本很高。")]),s._v(" "),e("li",[s._v("太短的键值通常也不是好主意，如果你要用”u:1000:pwd”来代替”user:1000:password”，这没有什么问题，但后者更易阅读，并且由此增加的空间消耗相对于key object和value object本身来说很小。当然，没人阻止您一定要用更短的键值节省一丁点儿空间。")]),s._v(" "),e("li",[s._v("最好坚持一种模式。例如：”object-type🆔field”就是个不错的注意，像这样”user:1000:password”。我喜欢对多单词的字段名中加上一个点，就像这样：”comment🔢reply.to”。")])])])])]),s._v(" "),e("h3",{attrs:{id:"string：字符串、数组、bitmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string：字符串、数组、bitmap"}},[s._v("#")]),s._v(" string：字符串、数组、bitmap")]),s._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[s._v("set 命令后面可以跟的参数")]),s._v(" "),e("p",[s._v("nx：当key不存在的时候，才会去创建，如果存在，则会返回失败")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("只能新建\n应用场景：分布式锁\n多个线程同时用这个命令进行赋值，谁赋值成功，谁就拿到了这个锁\n")])])]),e("p",[s._v("xx：当key存在的时候，才可以操作，如果不存在，则返回失败")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("只能更新\n")])])])]),s._v(" "),e("li",[e("p",[s._v("key中会存在一个type，用来描述值得数据类型，用来区分是字符串、数值、bitmap")]),s._v(" "),e("p",[s._v("针对字符串可以有一些运算api")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("应用场景：\n抢购，秒杀（扣减库存），详情页的数值，点赞，评论\n优点：\n规避高并发下，对数据库的事务操作，完全由redis的内存操作代替\n")])])])]),s._v(" "),e("li",[e("p",[s._v("对于数值型的计算能够保证其原子性")]),s._v(" "),e("p",[s._v("INCR是原子操作意味着什么呢？就是说即使多个客户端对同一个key发出INCR命令，也决不会导致竞争的情况。例如如下情况永远不可能发生：『客户端1和客户端2同时读出“10”，他们俩都对其加到11，然后将新值设置为11』。最终的值一定是12，read-increment-set操作完成之前，其他客户端不会在同一时间执行任何命令。")])]),s._v(" "),e("li",[e("p",[s._v("string值的长度不能超过512 MB")])])])]),s._v(" "),e("h3",{attrs:{id:"bit-arrays：或者说-simply-bitmaps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bit-arrays：或者说-simply-bitmaps"}},[s._v("#")]),s._v(" Bit arrays：或者说 simply bitmaps")]),s._v(" "),e("blockquote",[e("p",[s._v("通过特殊的命令，你可以将 String 值当作一系列 bits 处理：可以设置和清除单独的 bits，数出所有设为 1 的 bits 的数量，找到最前的被设为 1 或 0 的 bit，等等。")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("按位(1个字节有8位)的索引，值只能是0或1")])]),s._v(" "),e("li",[e("p",[s._v("setbit，指定的偏移位置是位的索引的位置")])]),s._v(" "),e("li",[e("p",[s._v("bitpos，后面跟的start,end是字节的索引位置，返回的是位的索引位置")])]),s._v(" "),e("li",[e("p",[s._v("bitcount，后面跟的start,end是字节的索引位置，返回的是出现的次数")])]),s._v(" "),e("li",[e("p",[s._v("bitop，按位与(有0则0，全1为1)，按位或(有1则1，全0为0)")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使用场景：\n1. 统计用户登录天数，且任意时刻或时间段\nbitcount key 0 -1（统计所有天数登录的次数之和）\n\n2. 用户只要登录，就送礼物。有2亿用户，需要备多少礼物\n活跃用户统计：1-3号连续登录，去重\n天为key，每一个用户有占一位作为值，最后使用bitcount按位或运算\n\n")])])])])])]),s._v(" "),e("h3",{attrs:{id:"hash：由field和关联的value组成的map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash：由field和关联的value组成的map"}},[s._v("#")]),s._v(" hash：由field和关联的value组成的map")]),s._v(" "),e("blockquote",[e("p",[s._v("值的操作类似string的处理")]),s._v(" "),e("p",[s._v("值如果是数值的时候，可进行数值操作")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("应用场景：\n详情页的数据集\n")])])])]),s._v(" "),e("h3",{attrs:{id:"list：按插入顺序排序的字符串元素的集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list：按插入顺序排序的字符串元素的集合"}},[s._v("#")]),s._v(" list：按插入顺序排序的字符串元素的集合")]),s._v(" "),e("blockquote",[e("p",[s._v("Redis lists基于双向Linked Lists实现，key上面存在两个属性，一个指向头部，一个指向尾部，这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的。")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("lpush 最后一个push的值始终在左侧；rpush 最后一个push的值始终的右侧")])]),s._v(" "),e("li",[e("p",[s._v("lpop 从左侧开始取值，取出之后同时删除；rpop 从右侧开始取值，取出之后同时删除")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("lpush\tlpop\nrpush\trpop\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#后进先出\t栈(同向命令)")]),s._v("\nlpush\trpop\nrpush\tlpop\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#先进先出\t队列(反向命令)")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("lrange key 0 -1得到所有值")])]),s._v(" "),e("li",[e("p",[s._v("lindex key index")])]),s._v(" "),e("li",[e("p",[s._v("lset key index value")])]),s._v(" "),e("li",[e("p",[s._v("lrem 正数时从左往右移除，负数时从右往左移除")])]),s._v(" "),e("li",[e("p",[s._v("linsert 从左往右找到第一个元素，然后在该元素之前或者之后插入")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("index\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#数组")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("blpop、brpop 如果没有key的值时，则一直处于阻塞状态；如果有值，则直接拿出")]),s._v(" "),e("p",[s._v("当多个消费者取一个key时，生产者生产了一个key以后，按照消费者的排队顺序进行依次取出")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#单播队列（FIFO先进先出）")]),s._v("\n")])])])]),s._v(" "),e("li",[e("p",[s._v("ltrim 对两端的数据进行移除")])])])]),s._v(" "),e("h3",{attrs:{id:"set：不重复且无序的字符串元素的集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set：不重复且无序的字符串元素的集合"}},[s._v("#")]),s._v(" set：不重复且无序的字符串元素的集合")]),s._v(" "),e("blockquote",[e("p",[s._v("sadd k2 1 2 3 4 5")]),s._v(" "),e("p",[s._v("sadd k3 4 5 6 7 8")]),s._v(" "),e("ol",[e("li",[s._v("求交集")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#直接把交集结果返回")]),s._v("\nsinter k2 k3\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#把交集结果放到targetkey中")]),s._v("\nsinterstore targetkey k2 k3\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("求并集")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#直接把并集结果返回")]),s._v("\nsunion k2 k3\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#把并集结果放到targetkey中")]),s._v("\nsunion targetkey k2 k3\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[s._v("求差集")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#直接把差集结果返回")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdiff")]),s._v(" k2 k3\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdiff")]),s._v(" k3 k2\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把差集结果放到targetkey中")]),s._v("\nsdiffstore target k2 k3\nsdiffstore target k3 k2\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sdiff 具有方向性,取出第一个key的差集，想要取出第二个的差集交换位置即可")]),s._v("\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[s._v("随机取出n个值，值并不从集合中删除")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("srandmember key count -count\n如果个数为正数，返回的结果可能会出现小于等于5的情况，但能够保证返回的结果不会有重复的值出现\n如果个数为负数，则会一直返回5个结果集，但并不能保证结果集当中是否有重复的值出现\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#应用场景：")]),s._v("\n抽奖：一共有10个奖品；用户数可能小于10个，也可能大于10个；中奖也分是否可以重复中奖\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[s._v("spop 随机取出一个值，并从集合中删除")])]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#应用场景：")]),s._v("\n年会抽奖：一个人只能抽中奖一次，中奖率会不断变化\n")])])])]),s._v(" "),e("h3",{attrs:{id:"sorted-set：通过score值进行排序的集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set：通过score值进行排序的集合"}},[s._v("#")]),s._v(" sorted set：通过score值进行排序的集合")]),s._v(" "),e("blockquote",[e("p",[s._v("类似Sets,但是每个字符串元素都关联到一个叫"),e("em",[s._v("score")]),s._v("浮动数值（floating number value）。里面的元素总是通过score进行着排序，所以不同的是，它是可以检索的一系列元素。（例如你可能会问：给我前面10个或者后面10个元素）。每个值都会关联一个分数。如果分值一样，默认按照名称排序")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("首先是一个去重的集合，如果有相同的值，则分数需要进行聚合，")]),s._v(" "),e("p",[s._v("聚合的种类：最小值、最大值、求个、平均值、权重")])]),s._v(" "),e("li",[e("p",[s._v("根据分数进行排序")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#默认按照分值从小到大排序（物理内存左小右大）")]),s._v("\nzadd k1 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" apple "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" banana "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" orange\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看k1的数据集合")]),s._v("\nzrange k1 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" -1 withscores\n")])])])]),s._v(" "),e("li",[e("p",[s._v("按照分值取数")]),s._v(" "),e("p",[s._v("zrangebyscore k1 2 4 取出分值范围内的数据(包含最小值和最大值的结果)")])]),s._v(" "),e("li",[e("p",[s._v("取出top或者low")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#最小的n个 downn")]),s._v("\nZRANGE k1 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" downn\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#最大的n个 topn")]),s._v("\nZREVRANGE k1 "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" topn\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#用负数仅仅是从n的那个位置一直到最后，依然是左小右大，依然是从小到大排的")]),s._v("\nZRANGE k1 -topn -1\n")])])])]),s._v(" "),e("li",[e("p",[s._v("可以对分值进行操作，操作后之后，时时根据分值进行排序")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#排序是如何实现的")]),s._v("\n存储结构：skip list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("跳跃表"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n一级索引（在原链表的基础上，元素随机出现一级索引位置）\n二级索引（在一级索引的基础上，元素随机出现在二级索引的位置）\n三级索引"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".同理\n从最小的索引位置，一直找到原链表的位置，然后进行更新索引\n")])])])]),s._v(" "),e("li",[e("p",[s._v("集合操作：")]),s._v(" "),e("p",[s._v("支持交集：分值需要聚合")]),s._v(" "),e("p",[s._v("支持并集：分值需要聚合")]),s._v(" "),e("p",[s._v("支持差集")])])])]),s._v(" "),e("h2",{attrs:{id:"redis发布订阅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis发布订阅"}},[s._v("#")]),s._v(" redis发布订阅")]),s._v(" "),e("blockquote",[e("p",[s._v("一个发布者，多个客户端都可以接收")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#监听管道：只能接收到监听之后客户端发的消息，监听之前客户端发的消息接收不到")]),s._v("\nSUBSCRIBE 管道名称\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#客户端往管道里面放消息")]),s._v("\nPUBLISH 管道名称 message\n\n应用场景：\n直播，群聊\n")])])]),e("p",[s._v("聊天记录存储：数据库存储全量数据")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("实时的记录：存储到redis，使用发布订阅进行消息接收，数据可以异步存储到数据库")])]),s._v(" "),e("li",[e("p",[s._v("3天内历史记录：存储到redis，使用sort set，把时间作为记录的分值")]),s._v(" "),e("p",[s._v("ZREMRANGEBYRANK，按照索引位置进行删除")]),s._v(" "),e("p",[s._v("ZREMRANGEBYSCORE，按照分值进行删除，因为时间是分值，可以仅仅保留3天内的数据")])]),s._v(" "),e("li",[e("p",[s._v("更久之前的历史记录，存储到数据库，从数据库查询")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("clinet------\x3eredis")])]),s._v(" "),e("li",[e("p",[s._v("redis------\x3eother clinet")]),s._v(" "),e("p",[s._v("redis------\x3eother reids存储sort set")]),s._v(" "),e("p",[s._v("redis------\x3eservice------\x3ekafka------\x3edbservice------\x3emysql")])])])])])]),s._v(" "),e("h2",{attrs:{id:"redis事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis事务"}},[s._v("#")]),s._v(" redis事务")]),s._v(" "),e("blockquote",[e("p",[s._v("因为redis是单进程，单线程的，所以当多个客户端发送事务时，根据哪个客户端发出的exec先到达，则先执行哪个客户端的事务，其他的客户端发出的事务有可能会报错，有可能会被撤销，主要看是否使用了watch命令。")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("watch：使用乐观锁的方式进行监听数据是否发生变化。如果数据没有变化，则事务会执行；如果值发生了变化，则事务自动撤销，不执行任何语句。")]),s._v(" "),e("p",[s._v("使用无参数的unwatch命令可以取消监视")])]),s._v(" "),e("li",[e("p",[s._v("multi：开启事务")])]),s._v(" "),e("li",[e("p",[s._v("exec：执行所有语句。当EXEC被调用时，不管事务是否成功执行，对所有键的监视都会被取消。")]),s._v(" "),e("p",[s._v("另外，当客户端断开连接时，该客户端对键的监视也会被取消。")])]),s._v(" "),e("li",[e("p",[s._v("discard：撤销事务。当执行DISCARD命令时，事务会被放弃，事务队列会被清空，并且客户端会从事务状态中退出。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("对于数值型的计算，redis可以保证其原子性")])])])]),s._v(" "),e("p",[e("strong",[s._v("为什么 Redis 不支持回滚（roll back）")])]),s._v(" "),e("p",[s._v("如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪，以下是这种做法的优点：")]),s._v(" "),e("ol",[e("li",[s._v("Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中")]),s._v(" "),e("li",[s._v("因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速")])]),s._v(" "),e("p",[s._v("有种观点认为 Redis 处理事务的做法会产生 bug，然而需要注意的是，在通常情况下，回滚并不能解决编程错误带来的问题。举个例子，如果你本来想通过INCR命令将键的值加上1，却不小心加上了2，又或者对错误类型的键执行了INCR，回滚是没有办法处理这些情况的。")])]),s._v(" "),e("h2",{attrs:{id:"redis穿透"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis穿透"}},[s._v("#")]),s._v(" redis穿透")]),s._v(" "),e("blockquote",[e("p",[s._v("缓存穿透，是指查询一个数据库一定不存在的数据，从而会让数据库多做很多无用的操作，如果并发量大，或者恶意攻击，会造成数据库承担很大的压力，更有甚者会造成宕机。")])]),s._v(" "),e("blockquote",[e("p",[s._v("缓存穿透解决方案：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("缓存空对象，当请求到达数据库时，如果查询结果为空，可将空值放入缓存，需要增加过期时间。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("布隆过滤器")]),s._v("拦截，把要查询的数据缓存起来（通过二进制向量和一系列随机映射函数，达到占用较少的内存，缓存较大的数据量），但是并不能达到百分之百的拦截，当请求过来时，再使用第一种方案，缓存空值，可以较大程度上减少缓存穿透的情况。")]),s._v(" "),e("p",[s._v("布隆过滤器：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://github.com/RedisBloom/RedisBloom/archive/master.zip\nyum "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("unzip")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("unzip")]),s._v(" master.zip\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" RedisBloom-master\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" redisbloom.so /usr/local/redis5\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" redis_6379 stop\nredis-server --loadmodule /usr/local/redis5/redisbloom.so\n")])])]),e("p",[s._v("原理")]),s._v(" "),e("ol",[e("li",[s._v("你有啥")]),s._v(" "),e("li",[s._v("有的像bitmap中标记")]),s._v(" "),e("li",[s._v("请求的可能被误标记")]),s._v(" "),e("li",[s._v("但是一定概率会大量减少放行，穿透")]),s._v(" "),e("li",[s._v("而且成本低")])]),s._v(" "),e("p",[s._v("使用bitmap进行存储，数据库里有的元素(根据什么进行搜搜，就可以把这个数据放到bitmap里)的映射关系")]),s._v(" "),e("p",[s._v("一个元素会经过n个或者k个不同的映射函数，会把相对应的位置由0变为1，多个元素产生的结果可能会出现碰撞，有一定的几率都是1")]),s._v(" "),e("p",[s._v("用户请求过来时，搜索的元素经过bitmap映射得到0时，说明数据库里一定没有，此时就可以返回了。如果得到1时，说明数据库有的几率很大，就可以放行，到数据库里进行查询。为1时数据库里没有的几率很小，一般不会超过百分之1。")])])])]),s._v(" "),e("blockquote",[e("p",[s._v("其他过滤器")]),s._v(" "),e("ol",[e("li",[s._v("Bloom Filter 系列改进之Counting Bloom Filter")]),s._v(" "),e("li",[s._v("布谷鸟过滤器")])])]),s._v(" "),e("h2",{attrs:{id:"redis缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis缓存"}},[s._v("#")]),s._v(" redis缓存")]),s._v(" "),e("blockquote",[e("p",[s._v("缓存和数据库的差别：")]),s._v(" "),e("ol",[e("li",[s._v("缓存的数据是不重要的")]),s._v(" "),e("li",[s._v("缓存的数据不是全量的")]),s._v(" "),e("li",[s._v("缓存应该随着访问进行变化，应该是经常访问的热数据（内存大小是有限制的，也就是其瓶颈）")])]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 控制最大内存(1-10G)\nmaxmemory bytes\n#内存达到最大值时，配置驱逐策略\nmaxmemory-policy noeviction\n1. noeviction 默认值：返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）\n2. allkeys-lru  尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。\n3. volatile-lru 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。\n4. allkeys-random 回收随机的键使得新添加的数据有空间存放。\n5. volatile-random 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。\n6. volatile-ttl 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。（找那个离过期时间最近的key剔除掉）\n\nallkeys（所有的key）、volatile（马上要过期的key）\nLFU（最少使用次数，碰了多少次）\nLRU（最少没有用：多久没碰）\n\n作为缓存时：一定不能用noeviction\n作为数据库时：一定要用noeviction\n")])])]),e("p",[s._v("一般的经验规则")]),s._v(" "),e("ul",[e("li",[s._v("如果没有键满足回收的前提条件的话，策略"),e("strong",[s._v("volatile-lru")]),s._v(", "),e("strong",[s._v("volatile-random")]),s._v("以及"),e("strong",[s._v("volatile-ttl")]),s._v("就和noeviction 差不多了")]),s._v(" "),e("li",[s._v("使用"),e("strong",[s._v("allkeys-lru")]),s._v("策略：当你希望你的请求符合一个幂定律分布，也就是说，你希望部分的子集元素将比其它其它元素被访问的更多。如果你不确定选择什么，这是个很好的选择。.")]),s._v(" "),e("li",[s._v("使用"),e("strong",[s._v("allkeys-random")]),s._v("：如果你是循环访问，所有的键被连续的扫描，或者你希望请求分布正常（所有元素被访问的概率都差不多）。")]),s._v(" "),e("li",[s._v("使用"),e("strong",[s._v("volatile-ttl")]),s._v("：如果你想要通过创建缓存对象时设置TTL值，来决定哪些对象应该被过期。")]),s._v(" "),e("li",[e("strong",[s._v("allkeys-lru")]),s._v(" 和 "),e("strong",[s._v("volatile-random")]),s._v("策略对于当你想要单一的实例实现缓存及持久化一些键时很有用。不过一般运行两个实例是解决这个问题的更好方法")])]),s._v(" "),e("p",[s._v("选择正确的回收策略是非常重要的，这取决于你的应用的访问模式，不过你可以在运行时进行相关的策略调整，并且监控缓存命中率和没命中的次数，通过RedisINFO命令输出以便调优。")])]),s._v(" "),e("h2",{attrs:{id:"redis-过期时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis-过期时间"}},[s._v("#")]),s._v(" redis 过期时间")]),s._v(" "),e("blockquote",[e("p",[s._v("过期时间：你可以对key设置一个过期时间，当这个时间到达后会被删除。精度可以使用毫秒或秒。")]),s._v(" "),e("p",[s._v("EXPIRE key 时间\t设置过期时间（倒计时，定时）")]),s._v(" "),e("p",[s._v("PERSIST key 时间\t剔除过期时间")]),s._v(" "),e("p",[s._v("ttl key 查看过期时间还剩多少")]),s._v(" "),e("ol",[e("li",[s._v("每次访问并不能重新计算过期时间")]),s._v(" "),e("li",[s._v("重新修改值之后，会直接剔除过期时间")])]),s._v(" "),e("p",[e("strong",[s._v("redis如何淘汰过期时间的key")])]),s._v(" "),e("ol",[e("li",[e("p",[s._v("被动的访问时判定")]),s._v(" "),e("p",[s._v("当客户端尝试访问的时候，key会被发现并主动剔除该key（过期的key有可能一辈子都不会被再次访问，所以这种方式并不能保证一定会把过期的key删除掉）")])]),s._v(" "),e("li",[e("p",[s._v("间接主动方式：每10秒要做的事情")]),s._v(" "),e("ol",[e("li",[s._v("测试随机的20个keys进行相关过期的检测")]),s._v(" "),e("li",[s._v("删除所有已经过期的key")]),s._v(" "),e("li",[s._v("如果有多余25%的keys过期，重复步骤1\n"),e("ol",[e("li",[s._v("如果有满足条件3，则立即对随机的20个key进行过期检测")]),s._v(" "),e("li",[s._v("如果没有满足条件3，则会在另一个10秒才会对随机的20key进行过期检测")])])])]),s._v(" "),e("p",[s._v("这是一个平凡的概率算法，基本上的假设是，我们的样本是这个秘钥控件，并且我们不断重复过期检测，直到过期的keys百分之百低于25%，这意味着，在任何给定的时刻，最多会清楚25%的过期的keys。")]),s._v(" "),e("p",[s._v("目的：稍微牺牲下内存，但是保住了redis性能为王。")])])])]),s._v(" "),e("h2",{attrs:{id:"redis持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化"}},[s._v("#")]),s._v(" redis持久化")]),s._v(" "),e("p",[e("strong",[s._v("持久化无外乎：镜像+日志")])]),s._v(" "),e("h3",{attrs:{id:"rdb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" RDB")]),s._v(" "),e("blockquote",[e("p",[s._v("也称快照方式，配置每隔一段时间执行一次全量备份，Redis将数据集快照保存在磁盘上，保存在一个名为dump.rdb的二进制文件中，也可以"),e("strong",[s._v("手动调用SAVE或BGSAVE命令")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("原理")]),s._v("：主进程调用fork函数生成一个子进程（fork之后，只是复制指针，而不是复制内存，所以时间会非常快，几乎不用考虑。同时主线程实现了Copy-on-Write，当值发生变化时，指针指向一个新的地址，旧的地址的数据保持不变），子进程进行磁盘I/O操作，"),e("strong",[s._v("操作完成后替换旧的RDB文件")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("优点")]),s._v("：非常适合做备份与回滚到指定的时间点，例如我们可以每天晚上2点执行定时计划全量备份一次Redis中的数据，以后我们进行恢复的时候可以将Redis恢复到指定的时间点的版本；与AOF相比使用"),e("strong",[s._v("RDB方式性能较高")]),s._v("；与AOF相比Redis"),e("strong",[s._v("重启的速度较快")]),s._v("。")]),s._v(" "),e("p",[e("strong",[s._v("缺点")]),s._v("：相比AOF丢失的数据可能会更多，比如设置1小时备份一次快照，那么最多会损失1小时的数据。")]),s._v(" "),e("p",[s._v("RDB配置：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("save "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("900")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\nsave "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nsave "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#配置解释：从下往上执行，先最后一个配置，")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 在 60 秒内，如果操作次数超过 10000 次，则直接后台调用执行备份；如果没有超过 10000 次，则向上看第二个判断，此时超过了10，则立即执行备份；")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 在 300 秒内，如果操作次数超过了 10 次，则直接后台调用执行备份，如果没有超过 10 次，则向上看第1个判断，此时超过了 1， 则立即执行备份。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 在 900 秒被，如果操作次数超过了 1 次，则立即执行备份")]),s._v("\n")])])])]),s._v(" "),e("h3",{attrs:{id:"aof：append-only-file-持久化：保存写状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof：append-only-file-持久化：保存写状态"}},[s._v("#")]),s._v(" AOF：Append-Only-File 持久化：保存写状态")]),s._v(" "),e("blockquote",[e("p",[s._v("以追加的方式记录Redis的写操作，并在Redis重启时进行重放（与MySQL的binlog日志的原理是一样的）。当AOF日志过大时，redis支持日志重写。【这里提供一个小知识点，在Redis中是先执行命令再记录日志到AOF，这也是Redis事务不支持回滚的原因：即使发生异常，没有可以用来执行回滚操作的日志。而传统的数据库例如MySQL都是先做日志然后再做操作，所以能够支持回滚】。")]),s._v(" "),e("p",[s._v("AOF相关配置：")]),s._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认关闭，若要开启将no改为yes")]),s._v("\nappendonly no\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# append文件的名字")]),s._v("\nappendfilename "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"appendonly.aof"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# AOF文件的写入方式")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# always一旦缓存区内容发生变化就写入AOF文件中")]),s._v("\nappendfsync always\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# everysec 每个一秒将缓存区内容写入文件 默认开启的写入方式")]),s._v("\nappendfsync everysec\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将写入文件的操作交由操作系统决定")]),s._v("\nappendfsync no\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当AOF文件大小的增长率大于该配置项时自动开启重写（这里指超过原大小的100%）。")]),s._v("\nauto-aof-rewrite-percentage "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当AOF文件大小大于该配置项时自动开启重写")]),s._v("\nauto-aof-rewrite-min-size 64mb\n")])])]),e("p",[e("strong",[s._v("原理")]),s._v("：操作系统将写操作首先记录到内存缓冲区中，然后使用fsync函数将数据刷新到磁盘中。")]),s._v(" "),e("p",[e("strong",[s._v("优点")]),s._v("：如果不考虑性能，AOF可以最大限度保证数据完整性，可以设置每发生一次写操作就调用一次fsync函数；更加灵活，可以使用不同的fsync策略：")]),s._v(" "),e("ol",[e("li",[s._v("always：一旦缓存区内容发生变化就立即写入AOF文件中（最大限度保证数据的完整性，极端情况下只会丢失一条数据）")]),s._v(" "),e("li",[s._v("everysec（默认）：每个一秒将缓存区内容写入文件（最多只会丢失这一秒内且比缓存区大小小1的数据量）")]),s._v(" "),e("li",[s._v("no：将写入文件的操作交由操作系统决定，当缓冲区满的时候，才会触发写操作（会丢失一个缓冲区的数据）")])]),s._v(" "),e("p",[e("strong",[s._v("缺点")]),s._v("：与RDB方式相比，相同数据集大小AOF占用空间更大；若调用fsync的频率过快，性能会变差。")]),s._v(" "),e("p",[e("strong",[s._v("需要注意的是")]),s._v("：AOF文件损坏？AOF文件中可能有一条命令是不完整的，比如发生正在写入的时候断电的这种情况，redis支持重放这样的AOF文件，他会在启动日志中记录错误命令的行数，并在重放时对该行进行忽略。")])]),s._v(" "),e("h4",{attrs:{id:"aof重写：bgrewriteaof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aof重写：bgrewriteaof"}},[s._v("#")]),s._v(" AOF重写：BGREWRITEAOF")]),s._v(" "),e("ul",[e("li",[s._v("AOF 持久化是通过保存被执行的写命令来记录数据库状态的，所以AOF文件的大小随着时间的流逝一定会越来越大；影响包括但不限于：对于Redis服务器，计算机的存储压力；AOF还原出数据库状态的时间增加。")]),s._v(" "),e("li",[s._v("为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF文件不会包含任何浪费空间的冗余命令，通常体积会较旧AOF文件小很多。")]),s._v(" "),e("li",[s._v("AOF重写并不需要对原有AOF文件进行任何的读取，写入，分析等操作，这个功能是通过读取服务器当前的数据库状态来实现的。")])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("实现原理")])]),s._v(" "),e("ul",[e("li",[s._v("首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录该键值对的多个命令;")]),s._v(" "),e("li",[s._v("实际为了避免执行命令时造成客户端输入缓冲区溢出，重写程序在处理"),e("code",[s._v("list hash set zset")]),s._v("时，会检查键所包含的元素的个数，如果元素的数量超过了"),e("code",[s._v("redis.h/REDIS_AOF_REWRITE_ITEMS_PER_CMD")]),s._v("常量的值，那么重写程序会使用多条命令来记录键的值，而不是单使用一条命令。该常量默认值是64，即每条命令设置的元素的个数 是最多64个，使用多条命令重写实现集合键中元素数量超过64个的键；")])])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("AOF后台重写")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("aof_rewrite")]),s._v("函数可以创建新的AOF文件，但是这个函数会进行大量的写入操作，所以调用这个函数的线程将被长时间的阻塞，因为Redis服务器使用单线程来处理命令请求；所以如果直接是服务器进程调用"),e("code",[s._v("AOF_REWRITE")]),s._v("函数的话，那么重写AOF期间，服务器将无法处理客户端发送来的命令请求；")]),s._v(" "),e("li",[s._v("Redis不希望AOF重写会造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程（后台）里执行。这样处理的最大好处是：\n"),e("ul",[e("li",[s._v("子进程进行AOF重写期间，主进程可以继续处理命令请求")]),s._v(" "),e("li",[s._v("子进程带有主进程的数据副本，使用子进程而不是线程，可以避免在锁的情况下，保证数据的安全性")])])])])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("使用子进程进行AOF重写的问题")])]),s._v(" "),e("p",[s._v("子进程在进行AOF重写期间，服务器进程还要继续处理命令请求，而新的命令可能对现有的数据进行修改，这会让当前数据库的数据和重写后的AOF文件中的数据不一致")])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("如何修正")])]),s._v(" "),e("ul",[e("li",[s._v("为了解决这种数据不一致的问题，Redis增加了一个"),e("strong",[s._v("AOF重写缓存")]),s._v("，这个缓存在fork出子进程之后开始启用，Redis服务器主进程在执行完写命令之后，会同时将这个写命令追加到AOF缓冲区和AOF重写缓冲区")]),s._v(" "),e("li",[s._v("即子进程在执行AOF重写时，主进程需要执行以下三个工作：\n"),e("ul",[e("li",[s._v("执行client发来的命令请求；")]),s._v(" "),e("li",[s._v("将写命令追加到现有的AOF文件中；")]),s._v(" "),e("li",[s._v("将写命令追加到AOF重写缓存中。")])])])]),s._v(" "),e("p",[s._v("要保证的是：")]),s._v(" "),e("ul",[e("li",[s._v("AOF缓冲区的内容会定期被写入和同步到AOF文件中，对现有的AOF文件的处理工作会正常进行")]),s._v(" "),e("li",[s._v("从创建子进程开始，服务器执行的所有写操作都会被记录到AOF重写缓冲区中，能够保证当前数据库的数据和重写后的AOF文件中的数据是一致的。")])]),s._v(" "),e("p",[s._v("完成AOF重写之后")]),s._v(" "),e("p",[s._v("当子进程完成对AOF文件重写之后，它会向父进程发送一个完成信号，父进程接到该完成信号之后，会调用一个信号处理函数，该函数完成以下工作")]),s._v(" "),e("ul",[e("li",[s._v("将AOF重写缓存中的内容全部写入到新的AOF文件中；这个时候新的AOF文件所保存的数据库状态和服务器当前的数据库状态一致；")]),s._v(" "),e("li",[s._v("对新的AOF文件进行改名，原子的覆盖原有的AOF文件；完成新旧两个AOF文件的替换")])]),s._v(" "),e("p",[s._v("当这个信号处理函数执行完毕之后，主进程就可以继续像往常一样接收命令请求了。在整个AOF后台重写过程中，只有最后的“主进程写入命令到AOF缓存”和“对新的AOF文件进行改名，覆盖原有的AOF文件。”这两个步骤（信号处理函数执行期间）会造成主进程阻塞，在其他时候，AOF后台重写都不会对主进程造成阻塞，这将AOF重写对性能造成的影响降到最低。")])]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("触发AOF后台重写的条件")])]),s._v(" "),e("ul",[e("li",[s._v("AOF重写可以由用户通过调用"),e("code",[s._v("BGREWRITEAOF")]),s._v("手动触发。")]),s._v(" "),e("li",[s._v("服务器在AOF功能开启的情况下，会维持以下三个变量：\n"),e("ul",[e("li",[s._v("记录当前AOF文件大小的变量"),e("code",[s._v("aof_current_size")]),s._v("。")]),s._v(" "),e("li",[s._v("记录最后一次AOF重写之后，AOF文件大小的变量"),e("code",[s._v("aof_rewrite_base_size")]),s._v("。")]),s._v(" "),e("li",[s._v("增长百分比变量"),e("code",[s._v("aof_rewrite_perc")]),s._v("。")])])]),s._v(" "),e("li",[s._v("每次当"),e("code",[s._v("serverCron")]),s._v("（服务器周期性操作函数）函数执行时，它会检查以下条件是否全部满足，如果全部满足的话，就触发自动的AOF重写操作：\n"),e("ul",[e("li",[s._v("没有BGSAVE命令（RDB持久化）/AOF持久化在执行；")]),s._v(" "),e("li",[s._v("没有BGREWRITEAOF在进行；")]),s._v(" "),e("li",[s._v("当前AOF文件大小要大于"),e("code",[s._v("server.aof_rewrite_min_size")]),s._v("（默认为1MB），或者在"),e("code",[s._v("redis.conf")]),s._v("配置了"),e("code",[s._v("auto-aof-rewrite-min-size")]),s._v("大小；")]),s._v(" "),e("li",[s._v("当前AOF文件大小和最后一次重写后的大小之间的比率等于或者等于指定的增长百分比（在配置文件设置了"),e("code",[s._v("auto-aof-rewrite-percentage")]),s._v("参数，不设置默认为100%）")])])])])]),s._v(" "),e("h3",{attrs:{id:"混合方式：rdb与aof混合使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混合方式：rdb与aof混合使用"}},[s._v("#")]),s._v(" 混合方式：RDB与AOF混合使用")]),s._v(" "),e("blockquote",[e("p",[s._v("将 RDB文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志。")])]),s._v(" "),e("h3",{attrs:{id:"redis官方建议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis官方建议"}},[s._v("#")]),s._v(" Redis官方建议")]),s._v(" "),e("blockquote",[e("p",[s._v("使用混合方式进行Redis的持久化。并且我们需要确保避免在RDB快照操作已经在进行时触发AOF重写，或者在AOF重写过程中允许BGSAVE，防止两个Redis后台进程同时执行磁盘I/O。")])]),s._v(" "),e("h2",{attrs:{id:"缓存的击穿"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存的击穿"}},[s._v("#")]),s._v(" 缓存的击穿")]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("描述")]),s._v("：缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。")]),s._v(" "),e("p",[e("strong",[s._v("解决方案")]),s._v("：")]),s._v(" "),e("ol",[e("li",[s._v("设置热点数据永远不过期。")]),s._v(" "),e("li",[s._v("从缓存中取数时，增加锁")])])]),s._v(" "),e("h2",{attrs:{id:"缓存的雪崩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存的雪崩"}},[s._v("#")]),s._v(" 缓存的雪崩")]),s._v(" "),e("blockquote",[e("p",[e("strong",[s._v("描述")]),s._v("：缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至宕机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。")]),s._v(" "),e("p",[e("strong",[s._v("解决方案")]),s._v("：")]),s._v(" "),e("ol",[e("li",[s._v("缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。")]),s._v(" "),e("li",[s._v("如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。")]),s._v(" "),e("li",[s._v("设置热点数据永远不过期。")])])]),s._v(" "),e("h2",{attrs:{id:"缓存的一致性（双写）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存的一致性（双写）"}},[s._v("#")]),s._v(" 缓存的一致性（双写）")]),s._v(" "),e("blockquote"),s._v(" "),e("h2",{attrs:{id:"redis集群、主从复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis集群、主从复制"}},[s._v("#")]),s._v(" redis集群、主从复制")]),s._v(" "),e("blockquote",[e("ol",[e("li",[e("p",[s._v("单点故障（主从集群：横向扩充）")])]),s._v(" "),e("li",[e("p",[s._v("承担的压力大（读写分离：横向扩充）")])]),s._v(" "),e("li",[e("p",[s._v("容量受限（：纵向扩充，按照业务线进行逻辑拆分，同一个业务线数据还很大，可以进行分片）")])])]),s._v(" "),e("p",[e("strong",[s._v("发生在客户端的解决方案")]),s._v("：redis server的连接成本很高，增加一层代理：1.反向代理，2.负载均衡")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("按照业务线进行拆分，客户端决定什么数据放到哪个redis集群下（纵向的每一个redis都是一个集群：主从集群，读写分类的）")])]),s._v(" "),e("li",[e("p",[s._v("算法拆分，key做hash取模（弊端：模数值必须固定，影响分布式下的扩展性）")])]),s._v(" "),e("li",[e("p",[s._v("随机拆分（自己都不知道扔到哪个实例上了，每一个实例的数据都不是完整的。典型应用场景：消息队列）")])]),s._v(" "),e("li",[e("p",[s._v("一致性哈希环（映射）算法，hash环上有0-2^32个点，各节点拿着一个固定的策略之进行hash算法，能够映射一个值，在hash环上就是是一个点。等数据来了的时候，拿key值进行hash算法，也能够得到一个值，对应hash环上的一个点。")]),s._v(" "),e("p",[s._v("hash环的特点：只有节点映射出的点才是物理的，key映射的点都是虚拟的，物理的点用treeMap进行封装。在这个结构中虚拟的点总能找到一个离他最近的物理的点，直接把数据存上去即可。")]),s._v(" "),e("p",[s._v("此时如果新增了一个node节点，得到一个物理的点，但是这个点离key值近了，数据就拿不到了。")]),s._v(" "),e("p",[s._v("优点：加节点，可以分担其他节点的压力，不会造成全局洗牌。")]),s._v(" "),e("p",[s._v("缺点：新增节点会造成一小部分数据不能命中（两种问题：1.会对数据库造成击穿，把压力压倒了数据库里；2.每次取离key值最近的两个物理节点，如果两个都取不到值，再去数据库里取）。")]),s._v(" "),e("p",[s._v("一个node节点，可以通过多个值进行多次映射，得到多个值，可以在环上映射多个物理节点，可以解决数据倾斜的问题。")]),s._v(" "),e("p",[s._v("更倾向于做为缓存使用，而不是数据库用。")])])]),s._v(" "),e("p",[e("strong",[s._v("twitter/twemproxy")]),s._v(" 可以使用作为代理。")]),s._v(" "),e("p",[e("strong",[s._v("predixy")]),s._v(" 可以使用作为代理。")]),s._v(" "),e("p",[e("strong",[s._v("cluster")]),s._v(" 可以使用作为代理。")]),s._v(" "),e("p",[s._v("集群高可用：ACP原则：可用性，一致性，分区容错性")])]),s._v(" "),e("h2",{attrs:{id:"redis开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis开发"}},[s._v("#")]),s._v(" redis开发")])])}),[],!1,null,null,null);a.default=v.exports}}]);